{"version":3,"sources":["webpack://codefresh/./resources/assets/js/pages/contact-us.js"],"names":["jQuery","document","ready","chatBtn","getElementById","addEventListener","Intercom","window","firstNameField","length","focus","newMap","$el","$markers","find","args","icon","path","google","maps","SymbolPath","FORWARD_CLOSED_ARROW","strokeColor","scale","zoom","center","LatLng","mapTypeId","MapTypeId","ROADMAP","disableDefaultUI","scrollwheel","navigationControl","mapTypeControl","scaleControl","draggable","styles","featureType","elementType","stylers","color","lightness","weight","visibility","saturation","map","Map","markers","each","$marker","latlng","attr","marker","Marker","position","url","push","html","infowindow","InfoWindow","content","event","addListener","open","addMarker","$","this","bounds","LatLngBounds","i","lat","lng","extend","setCenter","getCenter","setZoom","fitBounds","centerMap"],"mappings":"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","file":"/js/contact-us.js","sourcesContent":["/* eslint-disable no-undef */\njQuery( document ).ready( () => {\n    const chatBtn = document.getElementById('chatLink');\n    if(chatBtn)\n      chatBtn.addEventListener('click', () => Intercom('show'));\n\n    // Focus first field in the form\n    jQuery(window).ready( () => {\n      const firstNameField = jQuery('.name_first input');\n      if( firstNameField.length )\n        firstNameField.focus();\n    } );\n\n    /*\n     *  newMap\n     *\n     *  This function will render a Google Map onto the selected jQuery element\n     *\n     *  @type\tfunction\n     *  @param\t$el (jQuery element)\n     *  @return\tn/a\n     */\n    const newMap = $el => {\n      const $markers = $el.find('.marker');\n      const args = {\n        icon: {\n          path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,\n          strokeColor: 'yellow',\n          scale: 3,\n        },\n        zoom: 16,\n        center: new google.maps.LatLng(0, 0),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        disableDefaultUI: true,\n        scrollwheel: false,\n        navigationControl: false,\n        mapTypeControl: false,\n        scaleControl: false,\n        draggable: false,\n        styles: [\n          {\n            featureType: 'water',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#d6eee8',\n              },\n              {\n                lightness: 17,\n              },\n            ],\n          },\n          {\n            featureType: 'landscape',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#f5fcfa',\n              },\n              {\n                lightness: 20,\n              },\n            ],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.fill',\n            stylers: [\n              {\n                color: '#ffffff',\n              },\n              {\n                lightness: 17,\n              },\n            ],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.stroke',\n            stylers: [\n              {\n                color: '#ffffff',\n              },\n              {\n                lightness: 29,\n              },\n              {\n                weight: 0.2,\n              },\n            ],\n          },\n          {\n            featureType: 'road.arterial',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#ffffff',\n              },\n              {\n                lightness: 18,\n              },\n            ],\n          },\n          {\n            featureType: 'road.local',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#ffffff',\n              },\n              {\n                lightness: 16,\n              },\n            ],\n          },\n          {\n            featureType: 'poi',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#d6eee8',\n              },\n              {\n                lightness: 21,\n              },\n            ],\n          },\n          {\n            featureType: 'poi.park',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#ceece5',\n              },\n              {\n                lightness: 21,\n              },\n            ],\n          },\n          {\n            elementType: 'labels.text.stroke',\n            stylers: [\n              {\n                visibility: 'on',\n              },\n              {\n                color: '#ffffff',\n              },\n              {\n                lightness: 16,\n              },\n            ],\n          },\n          {\n            elementType: 'labels.text.fill',\n            stylers: [\n              {\n                saturation: 36,\n              },\n              {\n                color: '#29434b',\n              },\n              {\n                lightness: 40,\n              },\n            ],\n          },\n          {\n            elementType: 'labels.icon',\n            stylers: [\n              {\n                visibility: 'off',\n              },\n            ],\n          },\n          {\n            featureType: 'transit',\n            elementType: 'geometry',\n            stylers: [\n              {\n                color: '#d6eee8',\n              },\n              {\n                lightness: 19,\n              },\n            ],\n          },\n          {\n            featureType: 'administrative',\n            elementType: 'geometry.fill',\n            stylers: [\n              {\n                color: '#c5dfd8',\n              },\n              {\n                lightness: 20,\n              },\n            ],\n          },\n          {\n            featureType: 'administrative',\n            elementType: 'geometry.stroke',\n            stylers: [\n              {\n                color: '#c5dfd8',\n              },\n              {\n                lightness: 17,\n              },\n              {\n                weight: 1.2,\n              },\n            ],\n          },\n        ],\n      };\n\n      /*\n       *  addMarker\n       *\n       *  This function will add a marker to the selected Google Map\n       *\n       *  @type\tfunction\n       *  @param\t$marker (jQuery element)\n       *  @param\tmap (Google Map object)\n       *  @return\tn/a\n       */\n      const addMarker = ($marker, map) => {\n        const latlng = new google.maps.LatLng(\n          $marker.attr('data-lat'),\n          $marker.attr('data-lng')\n        );\n\n        // Create marker\n        var marker = new google.maps.Marker({\n          position: latlng,\n          map: map,\n          icon: {\n            url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',\n          },\n        });\n\n        // Add to array\n        map.markers.push(marker);\n\n        // If marker contains HTML, add it to an infoWindow\n        if ($marker.html()) {\n          // Create info window\n          var infowindow = new google.maps.InfoWindow({\n            content: $marker.html(),\n          });\n\n          // Show info window when marker is clicked\n          google.maps.event.addListener(marker, 'click', function() {\n            infowindow.open(map, marker);\n          });\n        }\n      };\n\n      /*\n       *  centerMap\n       *\n       *  This function will center the map, showing all markers attached to this map\n       *\n       *  @type\tfunction\n       *  @param\tmap (Google Map object)\n       *  @return\tn/a\n       */\n      function centerMap(map) {\n        const bounds = new google.maps.LatLngBounds();\n\n        // Loop through all markers and create bounds\n        $.each(map.markers, function(i, marker) {\n          const latlng = new google.maps.LatLng(\n            marker.position.lat(),\n            marker.position.lng()\n          );\n\n          bounds.extend(latlng);\n        });\n\n        // Only 1 marker?\n        if (map.markers.length == 1) {\n          // Set center of map\n          map.setCenter(bounds.getCenter());\n          map.setZoom(16);\n        } else {\n          // Fit to bounds\n          map.fitBounds(bounds);\n        }\n      }\n\n      // Create map\n      const map = new google.maps.Map($el[0], args);\n\n      // Add a markers reference\n      map.markers = [];\n\n      // Add markers\n      $markers.each(function() {\n        addMarker($(this), map);\n      });\n\n      // Center map\n      centerMap(map);\n\n      // Return\n      return map;\n    };\n\n    // Create maps\n    $('.acf-map').each(function() {\n      return newMap($(this));\n    });\n} );"],"sourceRoot":""}