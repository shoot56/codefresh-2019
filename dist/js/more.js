/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcodefresh"] = self["webpackChunkcodefresh"] || []).push([["/js/more"],{

/***/ "./resources/assets/js/more.js":
/*!*************************************!*\
  !*** ./resources/assets/js/more.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__factory, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__factory, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_3__factory, __WEBPACK_LOCAL_MODULE_3__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_4__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_5__exports;var __WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_6__factory, __WEBPACK_LOCAL_MODULE_6__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__, __WEBPACK_LOCAL_MODULE_7__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_8__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_9__, __WEBPACK_LOCAL_MODULE_9__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_10__, __WEBPACK_LOCAL_MODULE_10__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_11__, __WEBPACK_LOCAL_MODULE_11__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_12__, __WEBPACK_LOCAL_MODULE_12__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_13__, __WEBPACK_LOCAL_MODULE_13__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_14__, __WEBPACK_LOCAL_MODULE_14__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_15__, __WEBPACK_LOCAL_MODULE_15__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_16__, __WEBPACK_LOCAL_MODULE_16__exports;var __WEBPACK_LOCAL_MODULE_17__array, __WEBPACK_LOCAL_MODULE_17__factory, __WEBPACK_LOCAL_MODULE_17__exports, __WEBPACK_LOCAL_MODULE_17__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_19__, __WEBPACK_LOCAL_MODULE_19__exports;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _this = this;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// ===== DEFINITIONS\nvar consoleLogsEnable = false;\nvar blUrlDomainAndPathOnly = window.location.origin.concat(window.location.pathname);\nvar blQueryString = window.location.search;\nvar blUrlParams = new URLSearchParams(blQueryString);\nvar blUrlGclid = blUrlParams.get('gclid');\nvar blUrlUtmSource = blUrlParams.get('utm_source');\nvar blUrlUtmMedium = blUrlParams.get('utm_medium');\nvar blUrlUtmCampaign = blUrlParams.get('utm_campaign');\nvar blUrlUtmContent = blUrlParams.get('utm_content');\nvar blUrlUtmTerm = blUrlParams.get('utm_term'); // \"blCookieDuration\" is defined in seconds, 1 day = 86400, 1 week = 604800, 2 weeks = 1209600, 28 days = 2419200. 2 weeks should be long enough to measure something but short enough that the data can't get get stale and buggy. The default is 0, which sets a session cookie instead of duration based cookie. The default can be overridden when using the variable in a function.\n\nvar blCookieDuration = 0; // Default cookie to codefresh.io domain\n\nvar blCookieDomain = 'codefresh.io'; // Default cookie to path /\n\nvar blCookiePath = '/'; // Functions for getting DOM elements by Inner Text value, via https://stackoverflow.com/a/47815081\n\nHTMLElement.prototype.getElementsByInnerText = function (text, escape) {\n  var nodes = this.querySelectorAll(\"*\");\n  var matches = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].innerText == text) {\n      matches.push(nodes[i]);\n    }\n  }\n\n  if (escape) {\n    return matches;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < matches.length; i++) {\n    var filter = matches[i].getElementsByInnerText(text, true);\n\n    if (filter.length == 0) {\n      result.push(matches[i]);\n    }\n  }\n\n  return result;\n};\n\ndocument.getElementsByInnerText = HTMLElement.prototype.getElementsByInnerText;\n\nHTMLElement.prototype.getElementByInnerText = function (text) {\n  var result = this.getElementsByInnerText(text);\n  if (result.length == 0) return null;\n  return result[0];\n};\n\ndocument.getElementByInnerText = HTMLElement.prototype.getElementByInnerText; // Function for retrieving cookie values\n\nfunction getCookie(name) {\n  var value = \"; \".concat(document.cookie);\n  var parts = value.split(\"; \".concat(name, \"=\"));\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\n\n; // Function for setting cookie values\n\nfunction assembleCookie(blCookieName, blCookieData, blCookieDuration, blCookieDomain, blCookiePath) {\n  var assembledCookie = blCookieName + '=' + blCookieData + '; expires=' + blCookieDuration + '; domain=' + blCookieDomain + '; path=' + blCookiePath;\n  document.cookie = assembledCookie;\n\n  if (consoleLogsEnable == true) {\n    console.log('assembled cookie: ' + assembledCookie);\n  }\n\n  ;\n}\n\n; // Find form elements with the UTM value PANTHEON_STRIPPED and replace the stripped value with the real UTMs.\n// https://www.sitepoint.com/get-url-parameters-with-javascript/\n\nfunction fixStrippedUtms() {\n  // Fix the FORM element's ACTION attribute\n  var loopcount;\n  var formElements = document.querySelectorAll('form');\n\n  for (loopcount = 0; loopcount < formElements.length; loopcount++) {\n    var formAction = formElements[loopcount].getAttribute('action');\n\n    if (consoleLogsEnable == true) {\n      console.log('formAction: ' + formAction);\n    }\n\n    ;\n    var formActionUtmSource = 'utm_source=' + blUrlUtmSource;\n    var formActionUtmMedium = 'utm_medium=' + blUrlUtmMedium;\n    var formActionUtmCampaign = 'utm_campaign=' + blUrlUtmCampaign;\n    var formActionUtmContent = 'utm_content=' + blUrlUtmContent;\n    var formActionUtmTerm = 'utm_term=' + blUrlUtmTerm;\n    var replacedUtms = formAction.replace('utm_source=PANTHEON_STRIPPED', formActionUtmSource).replace('utm_medium=PANTHEON_STRIPPED', formActionUtmMedium).replace('utm_campaign=PANTHEON_STRIPPED', formActionUtmCampaign).replace('utm_content=PANTHEON_STRIPPED', formActionUtmContent).replace('utm_term=PANTHEON_STRIPPED', formActionUtmTerm);\n    formElements[loopcount].action = replacedUtms;\n  }\n\n  ; // Fix the INPUT value\n\n  var utmSourceTargetInputLabel = document.getElementByInnerText('utm_source');\n\n  if (utmSourceTargetInputLabel) {\n    var utmSourceTargetInput = utmSourceTargetInputLabel.nextElementSibling.firstElementChild;\n    utmSourceTargetInput.value = blUrlUtmSource;\n\n    if (consoleLogsEnable == true) {\n      console.log('source utm input value modified to match URL ' + utmSourceTargetInput.value);\n    }\n\n    ;\n  }\n\n  ; //\n\n  var utmMediumTargetInputLabel = document.getElementByInnerText('utm_medium');\n\n  if (utmMediumTargetInputLabel) {\n    var utmMediumTargetInput = utmMediumTargetInputLabel.nextElementSibling.firstElementChild;\n    utmMediumTargetInput.value = blUrlUtmMedium;\n\n    if (consoleLogsEnable == true) {\n      console.log('medium utm input value modified to match URL ' + utmMediumTargetInput.value);\n    }\n\n    ;\n  }\n\n  ; //\n\n  var utmCampaignTargetInputLabel = document.getElementByInnerText('utm_campaign');\n\n  if (utmCampaignTargetInputLabel) {\n    var utmCampaignTargetInput = utmCampaignTargetInputLabel.nextElementSibling.firstElementChild;\n    utmCampaignTargetInput.value = blUrlUtmCampaign;\n\n    if (consoleLogsEnable == true) {\n      console.log('campaign utm input value modified to match URL ' + utmCampaignTargetInput.value);\n    }\n\n    ;\n  }\n\n  ; //\n\n  var utmContentTargetInputLabel = document.getElementByInnerText('utm_Content');\n\n  if (utmContentTargetInputLabel) {\n    var utmContentTargetInput = utmContentTargetInputLabel.nextElementSibling.firstElementChild;\n    utmContentTargetInput.value = blUrlUtmContent;\n\n    if (consoleLogsEnable == true) {\n      console.log('content utm input value modified to match URL ' + utmContentTargetInput.value);\n    }\n\n    ;\n  }\n\n  ; //\n\n  var utmTermTargetInputLabel = document.getElementByInnerText('utm_term');\n\n  if (utmTermTargetInputLabel) {\n    var utmTermTargetInput = utmTermTargetInputLabel.nextElementSibling.firstElementChild;\n    utmTermTargetInput.value = blUrlUtmTerm;\n\n    if (consoleLogsEnable == true) {\n      console.log('term utm input value modified to match URL ' + utmTermTargetInput.value);\n    }\n\n    ;\n  }\n\n  ;\n}\n\n; // Append URL parameters to the sign up form buttons\n\nfunction addUrlParametersToLinks() {\n  /*signupButtons = document.querySelectorAll('.signup-options__item a');\n  for(loopcountSupButton=0;loopcountSupButton<signupButtons.length;loopcountSupButton++)\n  {\n    if(consoleLogsEnable == true)\n    {\n      console.log('url parameters: ' + blQueryString);\n      console.log('signup Buttons: ' + signupButtons[loopcountSupButton].href);\n    };\n    signupButtons[loopcountSupButton].href += blQueryString;\n  };*/\n}\n\n; // Store certain UTM values in a cookie\n\nfunction setBlCookies() {\n  var utmSourceCookieValue = getCookie('utm_source');\n  var utmMediumCookieValue = getCookie('utm_medium');\n  var utmCampaignCookieValue = getCookie('utm_campaign');\n  var utmContentCookieValue = getCookie('utm_content');\n  var utmTermCookieValue = getCookie('utm_term');\n  var gclidCookie = getCookie('gclid');\n\n  if (consoleLogsEnable == true) {\n    console.log('preexisting cookie utm_source: ' + utmSourceCookieValue);\n    console.log('preexisting cookie utm_medium: ' + utmMediumCookieValue);\n    console.log('preexisting cookie utm_campaign: ' + utmCampaignCookieValue);\n    console.log('preexisting cookie utm_content: ' + utmContentCookieValue);\n    console.log('preexisting cookie utm_term: ' + utmTermCookieValue);\n    console.log('preexisting cookie gclid: ' + gclidCookie);\n  }\n\n  ;\n\n  if (blUrlUtmSource !== undefined && blUrlUtmSource !== null) {\n    assembleCookie('utm_source', blUrlUtmSource, blCookieDuration, blCookieDomain, blCookiePath);\n  }\n\n  ;\n\n  if (blUrlUtmMedium !== undefined && blUrlUtmMedium !== null) {\n    assembleCookie('utm_medium', blUrlUtmMedium, blCookieDuration, blCookieDomain, blCookiePath);\n  }\n\n  ;\n\n  if (blUrlUtmCampaign !== undefined && blUrlUtmCampaign !== null) {\n    assembleCookie('utm_campaign', blUrlUtmCampaign, blCookieDuration, blCookieDomain, blCookiePath);\n  }\n\n  ;\n\n  if (blUrlUtmContent !== undefined && blUrlUtmContent !== null) {\n    assembleCookie('utm_content', blUrlUtmContent, blCookieDuration, blCookieDomain, blCookiePath);\n  }\n\n  ;\n\n  if (blUrlUtmTerm !== undefined && blUrlUtmTerm !== null) {\n    assembleCookie('utm_term', blUrlUtmTerm, blCookieDuration, blCookieDomain, blCookiePath);\n  }\n\n  ;\n\n  if (blUrlGclid !== undefined && blUrlGclid !== null) {\n    assembleCookie('gclid', blUrlGclid, blCookieDuration, blCookieDomain, blCookiePath);\n  }\n\n  ;\n}\n\n; // Video play button via https://daily-dev-tips.com/posts/vanilla-javascript-fullscreen-video/\n\nfunction buttonToPlayVideo() {\n  var blPlayVideo = function blPlayVideo() {\n    document.querySelector('.mejs-fullscreen-button > button').click();\n    document.querySelector('.mejs-play > button').click();\n  };\n\n  var blVideoButtons = document.querySelectorAll('.bl-video-play-btn');\n\n  for (loopcountBlvb = 0; loopcountBlvb < blVideoButtons.length; loopcountBlvb++) {\n    blVideoButtons[loopcountBlvb].addEventListener('click', function (event) {\n      blPlayVideo();\n    });\n  }\n\n  ;\n}\n\n; // For Hubspot forms, populate the hidden field for form_url\n// This callback must be run from the hubspot form embed code.\n// Please add the related callback to relevant form embed codes.\n\nwindow.populateFormUrl = function () {\n  var formElement = document.querySelector('form input[name=\"form_url\"]');\n\n  if (formElement !== undefined && formElement !== null) {\n    if (consoleLogsEnable == true) {\n      console.log(formElement);\n    }\n\n    ;\n    formElement.value = blUrlDomainAndPathOnly;\n\n    if (consoleLogsEnable == true) {\n      console.log('value after: ' + formElement.value);\n    }\n\n    ;\n  } else {\n    if (consoleLogsEnable == true) {\n      console.log('form_url input element not found');\n    }\n\n    ;\n  }\n\n  ; // blUrlDomainAndPathOnly\n}; // Detect if an element is in the viewport, to be used with on scroll\n// via https://gomakethings.com/how-to-test-if-an-element-is-in-the-viewport-with-vanilla-javascript/\n\n\nwindow.isInViewport = function (elem) {\n  var distance = elem.getBoundingClientRect();\n  return distance.top >= 0 && distance.left >= 0 && distance.bottom <= (window.innerHeight || document.documentElement.clientHeight) && distance.right <= (window.innerWidth || document.documentElement.clientWidth);\n}; // ===== ACTIONS\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  if (consoleLogsEnable == true) {\n    console.log('more.js loaded');\n  }\n\n  ;\n  fixStrippedUtms();\n  setBlCookies(); //addUrlParametersToLinks();\n\n  buttonToPlayVideo();\n  /**\n   * Smooth scroll via https://stackoverflow.com/a/49910518\n   */\n\n  var anchorlinks = document.querySelectorAll('a[href^=\"#\"]');\n\n  var _iterator = _createForOfIteratorHelper(anchorlinks),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var item = _step.value;\n      item.addEventListener('click', function (e) {\n        var hashval = item.getAttribute('href');\n        var target = document.querySelector(hashval);\n        target.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n          inline: 'start'\n        });\n        history.pushState(null, null, hashval);\n        e.preventDefault();\n      });\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}); // ===== TEMPORARY\n// adding Flickity in manually\n\n/*!\n * Flickity PACKAGED v2.3.0\n * Touch, responsive, flickable carousels\n *\n * Licensed GPLv3 for open source use\n * or Flickity Commercial License for commercial use\n *\n * https://flickity.metafizzy.co\n * Copyright 2015-2021 Metafizzy\n */\n\n(function (e, i) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (t) {\n      return i(e, t);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function t(e, r) {\n  \"use strict\";\n\n  var o = Array.prototype.slice;\n  var i = e.console;\n  var u = typeof i == \"undefined\" ? function () {} : function (t) {\n    i.error(t);\n  };\n\n  function n(h, s, c) {\n    c = c || r || e.jQuery;\n\n    if (!c) {\n      return;\n    }\n\n    if (!s.prototype.option) {\n      s.prototype.option = function (t) {\n        if (!c.isPlainObject(t)) {\n          return;\n        }\n\n        this.options = c.extend(true, this.options, t);\n      };\n    }\n\n    c.fn[h] = function (t) {\n      if (typeof t == \"string\") {\n        var e = o.call(arguments, 1);\n        return i(this, t, e);\n      }\n\n      n(this, t);\n      return this;\n    };\n\n    function i(t, r, o) {\n      var a;\n      var l = \"$().\" + h + '(\"' + r + '\")';\n      t.each(function (t, e) {\n        var i = c.data(e, h);\n\n        if (!i) {\n          u(h + \" not initialized. Cannot call methods, i.e. \" + l);\n          return;\n        }\n\n        var n = i[r];\n\n        if (!n || r.charAt(0) == \"_\") {\n          u(l + \" is not a valid method\");\n          return;\n        }\n\n        var s = n.apply(i, o);\n        a = a === undefined ? s : a;\n      });\n      return a !== undefined ? a : t;\n    }\n\n    function n(t, n) {\n      t.each(function (t, e) {\n        var i = c.data(e, h);\n\n        if (i) {\n          i.option(n);\n\n          i._init();\n        } else {\n          i = new s(e, n);\n          c.data(e, h, i);\n        }\n      });\n    }\n\n    a(c);\n  }\n\n  function a(t) {\n    if (!t || t && t.bridget) {\n      return;\n    }\n\n    t.bridget = n;\n  }\n\n  a(r || e.jQuery);\n  return n;\n});\n\n(function (t, e) {\n  if (true) {\n    !(__WEBPACK_LOCAL_MODULE_1__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_1__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_1__module = { id: \"ev-emitter/ev-emitter\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__factory.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module)), (__WEBPACK_LOCAL_MODULE_1__module.loaded = true), __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports)) : __WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__factory));\n  } else {}\n})(typeof window != \"undefined\" ? window : this, function () {\n  function t() {}\n\n  var e = t.prototype;\n\n  e.on = function (t, e) {\n    if (!t || !e) {\n      return;\n    }\n\n    var i = this._events = this._events || {};\n    var n = i[t] = i[t] || [];\n\n    if (n.indexOf(e) == -1) {\n      n.push(e);\n    }\n\n    return this;\n  };\n\n  e.once = function (t, e) {\n    if (!t || !e) {\n      return;\n    }\n\n    this.on(t, e);\n    var i = this._onceEvents = this._onceEvents || {};\n    var n = i[t] = i[t] || {};\n    n[e] = true;\n    return this;\n  };\n\n  e.off = function (t, e) {\n    var i = this._events && this._events[t];\n\n    if (!i || !i.length) {\n      return;\n    }\n\n    var n = i.indexOf(e);\n\n    if (n != -1) {\n      i.splice(n, 1);\n    }\n\n    return this;\n  };\n\n  e.emitEvent = function (t, e) {\n    var i = this._events && this._events[t];\n\n    if (!i || !i.length) {\n      return;\n    }\n\n    i = i.slice(0);\n    e = e || [];\n    var n = this._onceEvents && this._onceEvents[t];\n\n    for (var s = 0; s < i.length; s++) {\n      var r = i[s];\n      var o = n && n[r];\n\n      if (o) {\n        this.off(t, r);\n        delete n[r];\n      }\n\n      r.apply(this, e);\n    }\n\n    return this;\n  };\n\n  e.allOff = function () {\n    delete this._events;\n    delete this._onceEvents;\n  };\n\n  return t;\n});\n/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n\n(function (t, e) {\n  if (true) {\n    !(__WEBPACK_LOCAL_MODULE_2__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_2__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_2__module = { id: \"get-size/get-size\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__factory.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module)), (__WEBPACK_LOCAL_MODULE_2__module.loaded = true), __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports)) : __WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__factory));\n  } else {}\n})(window, function t() {\n  \"use strict\";\n\n  function m(t) {\n    var e = parseFloat(t);\n    var i = t.indexOf(\"%\") == -1 && !isNaN(e);\n    return i && e;\n  }\n\n  function e() {}\n\n  var i = typeof console == \"undefined\" ? e : function (t) {\n    console.error(t);\n  };\n  var y = [\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\", \"marginLeft\", \"marginRight\", \"marginTop\", \"marginBottom\", \"borderLeftWidth\", \"borderRightWidth\", \"borderTopWidth\", \"borderBottomWidth\"];\n  var b = y.length;\n\n  function E() {\n    var t = {\n      width: 0,\n      height: 0,\n      innerWidth: 0,\n      innerHeight: 0,\n      outerWidth: 0,\n      outerHeight: 0\n    };\n\n    for (var e = 0; e < b; e++) {\n      var i = y[e];\n      t[i] = 0;\n    }\n\n    return t;\n  }\n\n  function S(t) {\n    var e = getComputedStyle(t);\n\n    if (!e) {\n      i(\"Style returned \" + e + \". Are you running this code in a hidden iframe on Firefox? \" + \"See https://bit.ly/getsizebug1\");\n    }\n\n    return e;\n  }\n\n  var n = false;\n  var C;\n\n  function x() {\n    if (n) {\n      return;\n    }\n\n    n = true;\n    var t = document.createElement(\"div\");\n    t.style.width = \"200px\";\n    t.style.padding = \"1px 2px 3px 4px\";\n    t.style.borderStyle = \"solid\";\n    t.style.borderWidth = \"1px 2px 3px 4px\";\n    t.style.boxSizing = \"border-box\";\n    var e = document.body || document.documentElement;\n    e.appendChild(t);\n    var i = S(t);\n    C = Math.round(m(i.width)) == 200;\n    s.isBoxSizeOuter = C;\n    e.removeChild(t);\n  }\n\n  function s(t) {\n    x();\n\n    if (typeof t == \"string\") {\n      t = document.querySelector(t);\n    }\n\n    if (!t || _typeof(t) != \"object\" || !t.nodeType) {\n      return;\n    }\n\n    var e = S(t);\n\n    if (e.display == \"none\") {\n      return E();\n    }\n\n    var i = {};\n    i.width = t.offsetWidth;\n    i.height = t.offsetHeight;\n    var n = i.isBorderBox = e.boxSizing == \"border-box\";\n\n    for (var s = 0; s < b; s++) {\n      var r = y[s];\n      var o = e[r];\n      var a = parseFloat(o);\n      i[r] = !isNaN(a) ? a : 0;\n    }\n\n    var l = i.paddingLeft + i.paddingRight;\n    var h = i.paddingTop + i.paddingBottom;\n    var c = i.marginLeft + i.marginRight;\n    var u = i.marginTop + i.marginBottom;\n    var d = i.borderLeftWidth + i.borderRightWidth;\n    var f = i.borderTopWidth + i.borderBottomWidth;\n    var p = n && C;\n    var v = m(e.width);\n\n    if (v !== false) {\n      i.width = v + (p ? 0 : l + d);\n    }\n\n    var g = m(e.height);\n\n    if (g !== false) {\n      i.height = g + (p ? 0 : h + f);\n    }\n\n    i.innerWidth = i.width - (l + d);\n    i.innerHeight = i.height - (h + f);\n    i.outerWidth = i.width + c;\n    i.outerHeight = i.height + u;\n    return i;\n  }\n\n  return s;\n});\n\n(function (t, e) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_LOCAL_MODULE_3__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_3__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_3__module = { id: \"desandro-matches-selector/matches-selector\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__factory.call(__WEBPACK_LOCAL_MODULE_3__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_3__module.exports, __WEBPACK_LOCAL_MODULE_3__module)), (__WEBPACK_LOCAL_MODULE_3__module.loaded = true), __WEBPACK_LOCAL_MODULE_3__ === undefined && (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__module.exports)) : __WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__factory));\n  } else {}\n})(window, function t() {\n  \"use strict\";\n\n  var n = function () {\n    var t = window.Element.prototype;\n\n    if (t.matches) {\n      return \"matches\";\n    }\n\n    if (t.matchesSelector) {\n      return \"matchesSelector\";\n    }\n\n    var e = [\"webkit\", \"moz\", \"ms\", \"o\"];\n\n    for (var i = 0; i < e.length; i++) {\n      var n = e[i];\n      var s = n + \"MatchesSelector\";\n\n      if (t[s]) {\n        return s;\n      }\n    }\n  }();\n\n  return function t(e, i) {\n    return e[n](i);\n  };\n});\n\n(function (e, i) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_3__], __WEBPACK_LOCAL_MODULE_4__ = (function (t) {\n      return i(e, t);\n    }).apply(__WEBPACK_LOCAL_MODULE_4__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_4__ === undefined && (__WEBPACK_LOCAL_MODULE_4__ = __WEBPACK_LOCAL_MODULE_4__exports));\n  } else {}\n})(window, function t(h, r) {\n  var c = {};\n\n  c.extend = function (t, e) {\n    for (var i in e) {\n      t[i] = e[i];\n    }\n\n    return t;\n  };\n\n  c.modulo = function (t, e) {\n    return (t % e + e) % e;\n  };\n\n  var i = Array.prototype.slice;\n\n  c.makeArray = function (t) {\n    if (Array.isArray(t)) {\n      return t;\n    }\n\n    if (t === null || t === undefined) {\n      return [];\n    }\n\n    var e = _typeof(t) == \"object\" && typeof t.length == \"number\";\n\n    if (e) {\n      return i.call(t);\n    }\n\n    return [t];\n  };\n\n  c.removeFrom = function (t, e) {\n    var i = t.indexOf(e);\n\n    if (i != -1) {\n      t.splice(i, 1);\n    }\n  };\n\n  c.getParent = function (t, e) {\n    while (t.parentNode && t != document.body) {\n      t = t.parentNode;\n\n      if (r(t, e)) {\n        return t;\n      }\n    }\n  };\n\n  c.getQueryElement = function (t) {\n    if (typeof t == \"string\") {\n      return document.querySelector(t);\n    }\n\n    return t;\n  };\n\n  c.handleEvent = function (t) {\n    var e = \"on\" + t.type;\n\n    if (this[e]) {\n      this[e](t);\n    }\n  };\n\n  c.filterFindElements = function (t, n) {\n    t = c.makeArray(t);\n    var s = [];\n    t.forEach(function (t) {\n      if (!(t instanceof HTMLElement)) {\n        return;\n      }\n\n      if (!n) {\n        s.push(t);\n        return;\n      }\n\n      if (r(t, n)) {\n        s.push(t);\n      }\n\n      var e = t.querySelectorAll(n);\n\n      for (var i = 0; i < e.length; i++) {\n        s.push(e[i]);\n      }\n    });\n    return s;\n  };\n\n  c.debounceMethod = function (t, e, n) {\n    n = n || 100;\n    var s = t.prototype[e];\n    var r = e + \"Timeout\";\n\n    t.prototype[e] = function () {\n      var t = this[r];\n      clearTimeout(t);\n      var e = arguments;\n      var i = this;\n      this[r] = setTimeout(function () {\n        s.apply(i, e);\n        delete i[r];\n      }, n);\n    };\n  };\n\n  c.docReady = function (t) {\n    var e = document.readyState;\n\n    if (e == \"complete\" || e == \"interactive\") {\n      setTimeout(t);\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", t);\n    }\n  };\n\n  c.toDashed = function (t) {\n    return t.replace(/(.)([A-Z])/g, function (t, e, i) {\n      return e + \"-\" + i;\n    }).toLowerCase();\n  };\n\n  var u = h.console;\n\n  c.htmlInit = function (a, l) {\n    c.docReady(function () {\n      var t = c.toDashed(l);\n      var s = \"data-\" + t;\n      var e = document.querySelectorAll(\"[\" + s + \"]\");\n      var i = document.querySelectorAll(\".js-\" + t);\n      var n = c.makeArray(e).concat(c.makeArray(i));\n      var r = s + \"-options\";\n      var o = h.jQuery;\n      n.forEach(function (e) {\n        var t = e.getAttribute(s) || e.getAttribute(r);\n        var i;\n\n        try {\n          i = t && JSON.parse(t);\n        } catch (t) {\n          if (u) {\n            u.error(\"Error parsing \" + s + \" on \" + e.className + \": \" + t);\n          }\n\n          return;\n        }\n\n        var n = new a(e, i);\n\n        if (o) {\n          o.data(e, l, n);\n        }\n      });\n    });\n  };\n\n  return c;\n});\n\n(function (e, i) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_2__], __WEBPACK_LOCAL_MODULE_5__ = (function (t) {\n      return i(e, t);\n    }).apply(__WEBPACK_LOCAL_MODULE_5__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_5__ === undefined && (__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__exports));\n  } else {}\n})(window, function t(e, i) {\n  function n(t, e) {\n    this.element = t;\n    this.parent = e;\n    this.create();\n  }\n\n  var s = n.prototype;\n\n  s.create = function () {\n    this.element.style.position = \"absolute\";\n    this.element.setAttribute(\"aria-hidden\", \"true\");\n    this.x = 0;\n    this.shift = 0;\n    this.element.style[this.parent.originSide] = 0;\n  };\n\n  s.destroy = function () {\n    this.unselect();\n    this.element.style.position = \"\";\n    var t = this.parent.originSide;\n    this.element.style[t] = \"\";\n    this.element.style.transform = \"\";\n    this.element.removeAttribute(\"aria-hidden\");\n  };\n\n  s.getSize = function () {\n    this.size = i(this.element);\n  };\n\n  s.setPosition = function (t) {\n    this.x = t;\n    this.updateTarget();\n    this.renderPosition(t);\n  };\n\n  s.updateTarget = s.setDefaultTarget = function () {\n    var t = this.parent.originSide == \"left\" ? \"marginLeft\" : \"marginRight\";\n    this.target = this.x + this.size[t] + this.size.width * this.parent.cellAlign;\n  };\n\n  s.renderPosition = function (t) {\n    var e = this.parent.originSide === \"left\" ? 1 : -1;\n    var i = this.parent.options.percentPosition ? t * e * (this.parent.size.innerWidth / this.size.width) : t * e;\n    this.element.style.transform = \"translateX(\" + this.parent.getPositionValue(i) + \")\";\n  };\n\n  s.select = function () {\n    this.element.classList.add(\"is-selected\");\n    this.element.removeAttribute(\"aria-hidden\");\n  };\n\n  s.unselect = function () {\n    this.element.classList.remove(\"is-selected\");\n    this.element.setAttribute(\"aria-hidden\", \"true\");\n  };\n\n  s.wrapShift = function (t) {\n    this.shift = t;\n    this.renderPosition(this.x + this.parent.slideableWidth * t);\n  };\n\n  s.remove = function () {\n    this.element.parentNode.removeChild(this.element);\n  };\n\n  return n;\n});\n\n(function (t, e) {\n  if (true) {\n    !(__WEBPACK_LOCAL_MODULE_6__factory = (e), (typeof __WEBPACK_LOCAL_MODULE_6__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_6__module = { id: \"flickity/js/slide\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_6__ = __WEBPACK_LOCAL_MODULE_6__factory.call(__WEBPACK_LOCAL_MODULE_6__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_6__module.exports, __WEBPACK_LOCAL_MODULE_6__module)), (__WEBPACK_LOCAL_MODULE_6__module.loaded = true), __WEBPACK_LOCAL_MODULE_6__ === undefined && (__WEBPACK_LOCAL_MODULE_6__ = __WEBPACK_LOCAL_MODULE_6__module.exports)) : __WEBPACK_LOCAL_MODULE_6__ = __WEBPACK_LOCAL_MODULE_6__factory));\n  } else {}\n})(window, function t() {\n  \"use strict\";\n\n  function e(t) {\n    this.parent = t;\n    this.isOriginLeft = t.originSide == \"left\";\n    this.cells = [];\n    this.outerWidth = 0;\n    this.height = 0;\n  }\n\n  var i = e.prototype;\n\n  i.addCell = function (t) {\n    this.cells.push(t);\n    this.outerWidth += t.size.outerWidth;\n    this.height = Math.max(t.size.outerHeight, this.height);\n\n    if (this.cells.length == 1) {\n      this.x = t.x;\n      var e = this.isOriginLeft ? \"marginLeft\" : \"marginRight\";\n      this.firstMargin = t.size[e];\n    }\n  };\n\n  i.updateTarget = function () {\n    var t = this.isOriginLeft ? \"marginRight\" : \"marginLeft\";\n    var e = this.getLastCell();\n    var i = e ? e.size[t] : 0;\n    var n = this.outerWidth - (this.firstMargin + i);\n    this.target = this.x + this.firstMargin + n * this.parent.cellAlign;\n  };\n\n  i.getLastCell = function () {\n    return this.cells[this.cells.length - 1];\n  };\n\n  i.select = function () {\n    this.cells.forEach(function (t) {\n      t.select();\n    });\n  };\n\n  i.unselect = function () {\n    this.cells.forEach(function (t) {\n      t.unselect();\n    });\n  };\n\n  i.getCellElements = function () {\n    return this.cells.map(function (t) {\n      return t.element;\n    });\n  };\n\n  return e;\n});\n\n(function (e, i) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_7__ = (function (t) {\n      return i(e, t);\n    }).apply(__WEBPACK_LOCAL_MODULE_7__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_7__ === undefined && (__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__exports));\n  } else {}\n})(window, function t(e, i) {\n  var n = {};\n\n  n.startAnimation = function () {\n    if (this.isAnimating) {\n      return;\n    }\n\n    this.isAnimating = true;\n    this.restingFrames = 0;\n    this.animate();\n  };\n\n  n.animate = function () {\n    this.applyDragForce();\n    this.applySelectedAttraction();\n    var t = this.x;\n    this.integratePhysics();\n    this.positionSlider();\n    this.settle(t);\n\n    if (this.isAnimating) {\n      var e = this;\n      requestAnimationFrame(function t() {\n        e.animate();\n      });\n    }\n  };\n\n  n.positionSlider = function () {\n    var t = this.x;\n\n    if (this.options.wrapAround && this.cells.length > 1) {\n      t = i.modulo(t, this.slideableWidth);\n      t -= this.slideableWidth;\n      this.shiftWrapCells(t);\n    }\n\n    this.setTranslateX(t, this.isAnimating);\n    this.dispatchScrollEvent();\n  };\n\n  n.setTranslateX = function (t, e) {\n    t += this.cursorPosition;\n    t = this.options.rightToLeft ? -t : t;\n    var i = this.getPositionValue(t);\n    this.slider.style.transform = e ? \"translate3d(\" + i + \",0,0)\" : \"translateX(\" + i + \")\";\n  };\n\n  n.dispatchScrollEvent = function () {\n    var t = this.slides[0];\n\n    if (!t) {\n      return;\n    }\n\n    var e = -this.x - t.target;\n    var i = e / this.slidesWidth;\n    this.dispatchEvent(\"scroll\", null, [i, e]);\n  };\n\n  n.positionSliderAtSelected = function () {\n    if (!this.cells.length) {\n      return;\n    }\n\n    this.x = -this.selectedSlide.target;\n    this.velocity = 0;\n    this.positionSlider();\n  };\n\n  n.getPositionValue = function (t) {\n    if (this.options.percentPosition) {\n      return Math.round(t / this.size.innerWidth * 1e4) * .01 + \"%\";\n    } else {\n      return Math.round(t) + \"px\";\n    }\n  };\n\n  n.settle = function (t) {\n    var e = !this.isPointerDown && Math.round(this.x * 100) == Math.round(t * 100);\n\n    if (e) {\n      this.restingFrames++;\n    }\n\n    if (this.restingFrames > 2) {\n      this.isAnimating = false;\n      delete this.isFreeScrolling;\n      this.positionSlider();\n      this.dispatchEvent(\"settle\", null, [this.selectedIndex]);\n    }\n  };\n\n  n.shiftWrapCells = function (t) {\n    var e = this.cursorPosition + t;\n\n    this._shiftCells(this.beforeShiftCells, e, -1);\n\n    var i = this.size.innerWidth - (t + this.slideableWidth + this.cursorPosition);\n\n    this._shiftCells(this.afterShiftCells, i, 1);\n  };\n\n  n._shiftCells = function (t, e, i) {\n    for (var n = 0; n < t.length; n++) {\n      var s = t[n];\n      var r = e > 0 ? i : 0;\n      s.wrapShift(r);\n      e -= s.size.outerWidth;\n    }\n  };\n\n  n._unshiftCells = function (t) {\n    if (!t || !t.length) {\n      return;\n    }\n\n    for (var e = 0; e < t.length; e++) {\n      t[e].wrapShift(0);\n    }\n  };\n\n  n.integratePhysics = function () {\n    this.x += this.velocity;\n    this.velocity *= this.getFrictionFactor();\n  };\n\n  n.applyForce = function (t) {\n    this.velocity += t;\n  };\n\n  n.getFrictionFactor = function () {\n    return 1 - this.options[this.isFreeScrolling ? \"freeScrollFriction\" : \"friction\"];\n  };\n\n  n.getRestingPosition = function () {\n    return this.x + this.velocity / (1 - this.getFrictionFactor());\n  };\n\n  n.applyDragForce = function () {\n    if (!this.isDraggable || !this.isPointerDown) {\n      return;\n    }\n\n    var t = this.dragX - this.x;\n    var e = t - this.velocity;\n    this.applyForce(e);\n  };\n\n  n.applySelectedAttraction = function () {\n    var t = this.isDraggable && this.isPointerDown;\n\n    if (t || this.isFreeScrolling || !this.slides.length) {\n      return;\n    }\n\n    var e = this.selectedSlide.target * -1 - this.x;\n    var i = e * this.options.selectedAttraction;\n    this.applyForce(i);\n  };\n\n  return n;\n});\n\n(function (o, a) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_7__], __WEBPACK_LOCAL_MODULE_8__ = (function (t, e, i, n, s, r) {\n      return a(o, t, e, i, n, s, r);\n    }).apply(__WEBPACK_LOCAL_MODULE_8__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_8__ === undefined && (__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__exports));\n  } else { var t; }\n})(window, function t(n, e, i, a, s, o, r) {\n  var l = n.jQuery;\n  var h = n.getComputedStyle;\n  var c = n.console;\n\n  function u(t, e) {\n    t = a.makeArray(t);\n\n    while (t.length) {\n      e.appendChild(t.shift());\n    }\n  }\n\n  var d = 0;\n  var f = {};\n\n  function p(t, e) {\n    var i = a.getQueryElement(t);\n\n    if (!i) {\n      if (c) {\n        c.error(\"Bad element for Flickity: \" + (i || t));\n      }\n\n      return;\n    }\n\n    this.element = i;\n\n    if (this.element.flickityGUID) {\n      var n = f[this.element.flickityGUID];\n      if (n) n.option(e);\n      return n;\n    }\n\n    if (l) {\n      this.$element = l(this.element);\n    }\n\n    this.options = a.extend({}, this.constructor.defaults);\n    this.option(e);\n\n    this._create();\n  }\n\n  p.defaults = {\n    accessibility: true,\n    cellAlign: \"center\",\n    freeScrollFriction: .075,\n    friction: .28,\n    namespaceJQueryEvents: true,\n    percentPosition: true,\n    resize: true,\n    selectedAttraction: .025,\n    setGallerySize: true\n  };\n  p.createMethods = [];\n  var v = p.prototype;\n  a.extend(v, e.prototype);\n\n  v._create = function () {\n    var t = this.guid = ++d;\n    this.element.flickityGUID = t;\n    f[t] = this;\n    this.selectedIndex = 0;\n    this.restingFrames = 0;\n    this.x = 0;\n    this.velocity = 0;\n    this.originSide = this.options.rightToLeft ? \"right\" : \"left\";\n    this.viewport = document.createElement(\"div\");\n    this.viewport.className = \"flickity-viewport\";\n\n    this._createSlider();\n\n    if (this.options.resize || this.options.watchCSS) {\n      n.addEventListener(\"resize\", this);\n    }\n\n    for (var e in this.options.on) {\n      var i = this.options.on[e];\n      this.on(e, i);\n    }\n\n    p.createMethods.forEach(function (t) {\n      this[t]();\n    }, this);\n\n    if (this.options.watchCSS) {\n      this.watchCSS();\n    } else {\n      this.activate();\n    }\n  };\n\n  v.option = function (t) {\n    a.extend(this.options, t);\n  };\n\n  v.activate = function () {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    this.element.classList.add(\"flickity-enabled\");\n\n    if (this.options.rightToLeft) {\n      this.element.classList.add(\"flickity-rtl\");\n    }\n\n    this.getSize();\n\n    var t = this._filterFindCellElements(this.element.children);\n\n    u(t, this.slider);\n    this.viewport.appendChild(this.slider);\n    this.element.appendChild(this.viewport);\n    this.reloadCells();\n\n    if (this.options.accessibility) {\n      this.element.tabIndex = 0;\n      this.element.addEventListener(\"keydown\", this);\n    }\n\n    this.emitEvent(\"activate\");\n    this.selectInitialIndex();\n    this.isInitActivated = true;\n    this.dispatchEvent(\"ready\");\n  };\n\n  v._createSlider = function () {\n    var t = document.createElement(\"div\");\n    t.className = \"flickity-slider\";\n    t.style[this.originSide] = 0;\n    this.slider = t;\n  };\n\n  v._filterFindCellElements = function (t) {\n    return a.filterFindElements(t, this.options.cellSelector);\n  };\n\n  v.reloadCells = function () {\n    this.cells = this._makeCells(this.slider.children);\n    this.positionCells();\n\n    this._getWrapShiftCells();\n\n    this.setGallerySize();\n  };\n\n  v._makeCells = function (t) {\n    var e = this._filterFindCellElements(t);\n\n    var i = e.map(function (t) {\n      return new s(t, this);\n    }, this);\n    return i;\n  };\n\n  v.getLastCell = function () {\n    return this.cells[this.cells.length - 1];\n  };\n\n  v.getLastSlide = function () {\n    return this.slides[this.slides.length - 1];\n  };\n\n  v.positionCells = function () {\n    this._sizeCells(this.cells);\n\n    this._positionCells(0);\n  };\n\n  v._positionCells = function (t) {\n    t = t || 0;\n    this.maxCellHeight = t ? this.maxCellHeight || 0 : 0;\n    var e = 0;\n\n    if (t > 0) {\n      var i = this.cells[t - 1];\n      e = i.x + i.size.outerWidth;\n    }\n\n    var n = this.cells.length;\n\n    for (var s = t; s < n; s++) {\n      var r = this.cells[s];\n      r.setPosition(e);\n      e += r.size.outerWidth;\n      this.maxCellHeight = Math.max(r.size.outerHeight, this.maxCellHeight);\n    }\n\n    this.slideableWidth = e;\n    this.updateSlides();\n\n    this._containSlides();\n\n    this.slidesWidth = n ? this.getLastSlide().target - this.slides[0].target : 0;\n  };\n\n  v._sizeCells = function (t) {\n    t.forEach(function (t) {\n      t.getSize();\n    });\n  };\n\n  v.updateSlides = function () {\n    this.slides = [];\n\n    if (!this.cells.length) {\n      return;\n    }\n\n    var n = new o(this);\n    this.slides.push(n);\n    var t = this.originSide == \"left\";\n    var s = t ? \"marginRight\" : \"marginLeft\";\n\n    var r = this._getCanCellFit();\n\n    this.cells.forEach(function (t, e) {\n      if (!n.cells.length) {\n        n.addCell(t);\n        return;\n      }\n\n      var i = n.outerWidth - n.firstMargin + (t.size.outerWidth - t.size[s]);\n\n      if (r.call(this, e, i)) {\n        n.addCell(t);\n      } else {\n        n.updateTarget();\n        n = new o(this);\n        this.slides.push(n);\n        n.addCell(t);\n      }\n    }, this);\n    n.updateTarget();\n    this.updateSelectedSlide();\n  };\n\n  v._getCanCellFit = function () {\n    var t = this.options.groupCells;\n\n    if (!t) {\n      return function () {\n        return false;\n      };\n    } else if (typeof t == \"number\") {\n      var e = parseInt(t, 10);\n      return function (t) {\n        return t % e !== 0;\n      };\n    }\n\n    var i = typeof t == \"string\" && t.match(/^(\\d+)%$/);\n    var n = i ? parseInt(i[1], 10) / 100 : 1;\n    return function (t, e) {\n      return e <= (this.size.innerWidth + 1) * n;\n    };\n  };\n\n  v._init = v.reposition = function () {\n    this.positionCells();\n    this.positionSliderAtSelected();\n  };\n\n  v.getSize = function () {\n    this.size = i(this.element);\n    this.setCellAlign();\n    this.cursorPosition = this.size.innerWidth * this.cellAlign;\n  };\n\n  var g = {\n    center: {\n      left: .5,\n      right: .5\n    },\n    left: {\n      left: 0,\n      right: 1\n    },\n    right: {\n      right: 0,\n      left: 1\n    }\n  };\n\n  v.setCellAlign = function () {\n    var t = g[this.options.cellAlign];\n    this.cellAlign = t ? t[this.originSide] : this.options.cellAlign;\n  };\n\n  v.setGallerySize = function () {\n    if (this.options.setGallerySize) {\n      var t = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;\n      this.viewport.style.height = t + \"px\";\n    }\n  };\n\n  v._getWrapShiftCells = function () {\n    if (!this.options.wrapAround) {\n      return;\n    }\n\n    this._unshiftCells(this.beforeShiftCells);\n\n    this._unshiftCells(this.afterShiftCells);\n\n    var t = this.cursorPosition;\n    var e = this.cells.length - 1;\n    this.beforeShiftCells = this._getGapCells(t, e, -1);\n    t = this.size.innerWidth - this.cursorPosition;\n    this.afterShiftCells = this._getGapCells(t, 0, 1);\n  };\n\n  v._getGapCells = function (t, e, i) {\n    var n = [];\n\n    while (t > 0) {\n      var s = this.cells[e];\n\n      if (!s) {\n        break;\n      }\n\n      n.push(s);\n      e += i;\n      t -= s.size.outerWidth;\n    }\n\n    return n;\n  };\n\n  v._containSlides = function () {\n    if (!this.options.contain || this.options.wrapAround || !this.cells.length) {\n      return;\n    }\n\n    var t = this.options.rightToLeft;\n    var e = t ? \"marginRight\" : \"marginLeft\";\n    var i = t ? \"marginLeft\" : \"marginRight\";\n    var n = this.slideableWidth - this.getLastCell().size[i];\n    var s = n < this.size.innerWidth;\n    var r = this.cursorPosition + this.cells[0].size[e];\n    var o = n - this.size.innerWidth * (1 - this.cellAlign);\n    this.slides.forEach(function (t) {\n      if (s) {\n        t.target = n * this.cellAlign;\n      } else {\n        t.target = Math.max(t.target, r);\n        t.target = Math.min(t.target, o);\n      }\n    }, this);\n  };\n\n  v.dispatchEvent = function (t, e, i) {\n    var n = e ? [e].concat(i) : i;\n    this.emitEvent(t, n);\n\n    if (l && this.$element) {\n      t += this.options.namespaceJQueryEvents ? \".flickity\" : \"\";\n      var s = t;\n\n      if (e) {\n        var r = new l.Event(e);\n        r.type = t;\n        s = r;\n      }\n\n      this.$element.trigger(s, i);\n    }\n  };\n\n  v.select = function (t, e, i) {\n    if (!this.isActive) {\n      return;\n    }\n\n    t = parseInt(t, 10);\n\n    this._wrapSelect(t);\n\n    if (this.options.wrapAround || e) {\n      t = a.modulo(t, this.slides.length);\n    }\n\n    if (!this.slides[t]) {\n      return;\n    }\n\n    var n = this.selectedIndex;\n    this.selectedIndex = t;\n    this.updateSelectedSlide();\n\n    if (i) {\n      this.positionSliderAtSelected();\n    } else {\n      this.startAnimation();\n    }\n\n    if (this.options.adaptiveHeight) {\n      this.setGallerySize();\n    }\n\n    this.dispatchEvent(\"select\", null, [t]);\n\n    if (t != n) {\n      this.dispatchEvent(\"change\", null, [t]);\n    }\n\n    this.dispatchEvent(\"cellSelect\");\n  };\n\n  v._wrapSelect = function (t) {\n    var e = this.slides.length;\n    var i = this.options.wrapAround && e > 1;\n\n    if (!i) {\n      return t;\n    }\n\n    var n = a.modulo(t, e);\n    var s = Math.abs(n - this.selectedIndex);\n    var r = Math.abs(n + e - this.selectedIndex);\n    var o = Math.abs(n - e - this.selectedIndex);\n\n    if (!this.isDragSelect && r < s) {\n      t += e;\n    } else if (!this.isDragSelect && o < s) {\n      t -= e;\n    }\n\n    if (t < 0) {\n      this.x -= this.slideableWidth;\n    } else if (t >= e) {\n      this.x += this.slideableWidth;\n    }\n  };\n\n  v.previous = function (t, e) {\n    this.select(this.selectedIndex - 1, t, e);\n  };\n\n  v.next = function (t, e) {\n    this.select(this.selectedIndex + 1, t, e);\n  };\n\n  v.updateSelectedSlide = function () {\n    var t = this.slides[this.selectedIndex];\n\n    if (!t) {\n      return;\n    }\n\n    this.unselectSelectedSlide();\n    this.selectedSlide = t;\n    t.select();\n    this.selectedCells = t.cells;\n    this.selectedElements = t.getCellElements();\n    this.selectedCell = t.cells[0];\n    this.selectedElement = this.selectedElements[0];\n  };\n\n  v.unselectSelectedSlide = function () {\n    if (this.selectedSlide) {\n      this.selectedSlide.unselect();\n    }\n  };\n\n  v.selectInitialIndex = function () {\n    var t = this.options.initialIndex;\n\n    if (this.isInitActivated) {\n      this.select(this.selectedIndex, false, true);\n      return;\n    }\n\n    if (t && typeof t == \"string\") {\n      var e = this.queryCell(t);\n\n      if (e) {\n        this.selectCell(t, false, true);\n        return;\n      }\n    }\n\n    var i = 0;\n\n    if (t && this.slides[t]) {\n      i = t;\n    }\n\n    this.select(i, false, true);\n  };\n\n  v.selectCell = function (t, e, i) {\n    var n = this.queryCell(t);\n\n    if (!n) {\n      return;\n    }\n\n    var s = this.getCellSlideIndex(n);\n    this.select(s, e, i);\n  };\n\n  v.getCellSlideIndex = function (t) {\n    for (var e = 0; e < this.slides.length; e++) {\n      var i = this.slides[e];\n      var n = i.cells.indexOf(t);\n\n      if (n != -1) {\n        return e;\n      }\n    }\n  };\n\n  v.getCell = function (t) {\n    for (var e = 0; e < this.cells.length; e++) {\n      var i = this.cells[e];\n\n      if (i.element == t) {\n        return i;\n      }\n    }\n  };\n\n  v.getCells = function (t) {\n    t = a.makeArray(t);\n    var i = [];\n    t.forEach(function (t) {\n      var e = this.getCell(t);\n\n      if (e) {\n        i.push(e);\n      }\n    }, this);\n    return i;\n  };\n\n  v.getCellElements = function () {\n    return this.cells.map(function (t) {\n      return t.element;\n    });\n  };\n\n  v.getParentCell = function (t) {\n    var e = this.getCell(t);\n\n    if (e) {\n      return e;\n    }\n\n    t = a.getParent(t, \".flickity-slider > *\");\n    return this.getCell(t);\n  };\n\n  v.getAdjacentCellElements = function (t, e) {\n    if (!t) {\n      return this.selectedSlide.getCellElements();\n    }\n\n    e = e === undefined ? this.selectedIndex : e;\n    var i = this.slides.length;\n\n    if (1 + t * 2 >= i) {\n      return this.getCellElements();\n    }\n\n    var n = [];\n\n    for (var s = e - t; s <= e + t; s++) {\n      var r = this.options.wrapAround ? a.modulo(s, i) : s;\n      var o = this.slides[r];\n\n      if (o) {\n        n = n.concat(o.getCellElements());\n      }\n    }\n\n    return n;\n  };\n\n  v.queryCell = function (t) {\n    if (typeof t == \"number\") {\n      return this.cells[t];\n    }\n\n    if (typeof t == \"string\") {\n      if (t.match(/^[#.]?[\\d/]/)) {\n        return;\n      }\n\n      t = this.element.querySelector(t);\n    }\n\n    return this.getCell(t);\n  };\n\n  v.uiChange = function () {\n    this.emitEvent(\"uiChange\");\n  };\n\n  v.childUIPointerDown = function (t) {\n    if (t.type != \"touchstart\") {\n      t.preventDefault();\n    }\n\n    this.focus();\n  };\n\n  v.onresize = function () {\n    this.watchCSS();\n    this.resize();\n  };\n\n  a.debounceMethod(p, \"onresize\", 150);\n\n  v.resize = function () {\n    if (!this.isActive || this.isAnimating || this.isDragging) {\n      return;\n    }\n\n    this.getSize();\n\n    if (this.options.wrapAround) {\n      this.x = a.modulo(this.x, this.slideableWidth);\n    }\n\n    this.positionCells();\n\n    this._getWrapShiftCells();\n\n    this.setGallerySize();\n    this.emitEvent(\"resize\");\n    var t = this.selectedElements && this.selectedElements[0];\n    this.selectCell(t, false, true);\n  };\n\n  v.watchCSS = function () {\n    var t = this.options.watchCSS;\n\n    if (!t) {\n      return;\n    }\n\n    var e = h(this.element, \":after\").content;\n\n    if (e.indexOf(\"flickity\") != -1) {\n      this.activate();\n    } else {\n      this.deactivate();\n    }\n  };\n\n  v.onkeydown = function (t) {\n    var e = document.activeElement && document.activeElement != this.element;\n\n    if (!this.options.accessibility || e) {\n      return;\n    }\n\n    var i = p.keyboardHandlers[t.keyCode];\n\n    if (i) {\n      i.call(this);\n    }\n  };\n\n  p.keyboardHandlers = {\n    37: function _() {\n      var t = this.options.rightToLeft ? \"next\" : \"previous\";\n      this.uiChange();\n      this[t]();\n    },\n    39: function _() {\n      var t = this.options.rightToLeft ? \"previous\" : \"next\";\n      this.uiChange();\n      this[t]();\n    }\n  };\n\n  v.focus = function () {\n    var t = n.pageYOffset;\n    this.element.focus({\n      preventScroll: true\n    });\n\n    if (n.pageYOffset != t) {\n      n.scrollTo(n.pageXOffset, t);\n    }\n  };\n\n  v.deactivate = function () {\n    if (!this.isActive) {\n      return;\n    }\n\n    this.element.classList.remove(\"flickity-enabled\");\n    this.element.classList.remove(\"flickity-rtl\");\n    this.unselectSelectedSlide();\n    this.cells.forEach(function (t) {\n      t.destroy();\n    });\n    this.element.removeChild(this.viewport);\n    u(this.slider.children, this.element);\n\n    if (this.options.accessibility) {\n      this.element.removeAttribute(\"tabIndex\");\n      this.element.removeEventListener(\"keydown\", this);\n    }\n\n    this.isActive = false;\n    this.emitEvent(\"deactivate\");\n  };\n\n  v.destroy = function () {\n    this.deactivate();\n    n.removeEventListener(\"resize\", this);\n    this.allOff();\n    this.emitEvent(\"destroy\");\n\n    if (l && this.$element) {\n      l.removeData(this.element, \"flickity\");\n    }\n\n    delete this.element.flickityGUID;\n    delete f[this.guid];\n  };\n\n  a.extend(v, r);\n\n  p.data = function (t) {\n    t = a.getQueryElement(t);\n    var e = t && t.flickityGUID;\n    return e && f[e];\n  };\n\n  a.htmlInit(p, \"flickity\");\n\n  if (l && l.bridget) {\n    l.bridget(\"flickity\", p);\n  }\n\n  p.setJQuery = function (t) {\n    l = t;\n  };\n\n  p.Cell = s;\n  p.Slide = o;\n  return p;\n});\n/*!\n * Unipointer v2.4.0\n * base class for doing one thing with pointer event\n * MIT license\n */\n\n\n(function (e, i) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__], __WEBPACK_LOCAL_MODULE_9__ = (function (t) {\n      return i(e, t);\n    }).apply(__WEBPACK_LOCAL_MODULE_9__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_9__ === undefined && (__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__exports));\n  } else {}\n})(window, function t(s, e) {\n  function i() {}\n\n  function n() {}\n\n  var r = n.prototype = Object.create(e.prototype);\n\n  r.bindStartEvent = function (t) {\n    this._bindStartEvent(t, true);\n  };\n\n  r.unbindStartEvent = function (t) {\n    this._bindStartEvent(t, false);\n  };\n\n  r._bindStartEvent = function (t, e) {\n    e = e === undefined ? true : e;\n    var i = e ? \"addEventListener\" : \"removeEventListener\";\n    var n = \"mousedown\";\n\n    if (\"ontouchstart\" in s) {\n      n = \"touchstart\";\n    } else if (s.PointerEvent) {\n      n = \"pointerdown\";\n    }\n\n    t[i](n, this);\n  };\n\n  r.handleEvent = function (t) {\n    var e = \"on\" + t.type;\n\n    if (this[e]) {\n      this[e](t);\n    }\n  };\n\n  r.getTouch = function (t) {\n    for (var e = 0; e < t.length; e++) {\n      var i = t[e];\n\n      if (i.identifier == this.pointerIdentifier) {\n        return i;\n      }\n    }\n  };\n\n  r.onmousedown = function (t) {\n    var e = t.button;\n\n    if (e && e !== 0 && e !== 1) {\n      return;\n    }\n\n    this._pointerDown(t, t);\n  };\n\n  r.ontouchstart = function (t) {\n    this._pointerDown(t, t.changedTouches[0]);\n  };\n\n  r.onpointerdown = function (t) {\n    this._pointerDown(t, t);\n  };\n\n  r._pointerDown = function (t, e) {\n    if (t.button || this.isPointerDown) {\n      return;\n    }\n\n    this.isPointerDown = true;\n    this.pointerIdentifier = e.pointerId !== undefined ? e.pointerId : e.identifier;\n    this.pointerDown(t, e);\n  };\n\n  r.pointerDown = function (t, e) {\n    this._bindPostStartEvents(t);\n\n    this.emitEvent(\"pointerDown\", [t, e]);\n  };\n\n  var o = {\n    mousedown: [\"mousemove\", \"mouseup\"],\n    touchstart: [\"touchmove\", \"touchend\", \"touchcancel\"],\n    pointerdown: [\"pointermove\", \"pointerup\", \"pointercancel\"]\n  };\n\n  r._bindPostStartEvents = function (t) {\n    if (!t) {\n      return;\n    }\n\n    var e = o[t.type];\n    e.forEach(function (t) {\n      s.addEventListener(t, this);\n    }, this);\n    this._boundPointerEvents = e;\n  };\n\n  r._unbindPostStartEvents = function () {\n    if (!this._boundPointerEvents) {\n      return;\n    }\n\n    this._boundPointerEvents.forEach(function (t) {\n      s.removeEventListener(t, this);\n    }, this);\n\n    delete this._boundPointerEvents;\n  };\n\n  r.onmousemove = function (t) {\n    this._pointerMove(t, t);\n  };\n\n  r.onpointermove = function (t) {\n    if (t.pointerId == this.pointerIdentifier) {\n      this._pointerMove(t, t);\n    }\n  };\n\n  r.ontouchmove = function (t) {\n    var e = this.getTouch(t.changedTouches);\n\n    if (e) {\n      this._pointerMove(t, e);\n    }\n  };\n\n  r._pointerMove = function (t, e) {\n    this.pointerMove(t, e);\n  };\n\n  r.pointerMove = function (t, e) {\n    this.emitEvent(\"pointerMove\", [t, e]);\n  };\n\n  r.onmouseup = function (t) {\n    this._pointerUp(t, t);\n  };\n\n  r.onpointerup = function (t) {\n    if (t.pointerId == this.pointerIdentifier) {\n      this._pointerUp(t, t);\n    }\n  };\n\n  r.ontouchend = function (t) {\n    var e = this.getTouch(t.changedTouches);\n\n    if (e) {\n      this._pointerUp(t, e);\n    }\n  };\n\n  r._pointerUp = function (t, e) {\n    this._pointerDone();\n\n    this.pointerUp(t, e);\n  };\n\n  r.pointerUp = function (t, e) {\n    this.emitEvent(\"pointerUp\", [t, e]);\n  };\n\n  r._pointerDone = function () {\n    this._pointerReset();\n\n    this._unbindPostStartEvents();\n\n    this.pointerDone();\n  };\n\n  r._pointerReset = function () {\n    this.isPointerDown = false;\n    delete this.pointerIdentifier;\n  };\n\n  r.pointerDone = i;\n\n  r.onpointercancel = function (t) {\n    if (t.pointerId == this.pointerIdentifier) {\n      this._pointerCancel(t, t);\n    }\n  };\n\n  r.ontouchcancel = function (t) {\n    var e = this.getTouch(t.changedTouches);\n\n    if (e) {\n      this._pointerCancel(t, e);\n    }\n  };\n\n  r._pointerCancel = function (t, e) {\n    this._pointerDone();\n\n    this.pointerCancel(t, e);\n  };\n\n  r.pointerCancel = function (t, e) {\n    this.emitEvent(\"pointerCancel\", [t, e]);\n  };\n\n  n.getPointerPoint = function (t) {\n    return {\n      x: t.pageX,\n      y: t.pageY\n    };\n  };\n\n  return n;\n});\n/*!\n * Unidragger v2.4.0\n * Draggable base class\n * MIT license\n */\n\n\n(function (e, i) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_9__], __WEBPACK_LOCAL_MODULE_10__ = (function (t) {\n      return i(e, t);\n    }).apply(__WEBPACK_LOCAL_MODULE_10__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_10__ === undefined && (__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__exports));\n  } else {}\n})(window, function t(r, e) {\n  function i() {}\n\n  var n = i.prototype = Object.create(e.prototype);\n\n  n.bindHandles = function () {\n    this._bindHandles(true);\n  };\n\n  n.unbindHandles = function () {\n    this._bindHandles(false);\n  };\n\n  n._bindHandles = function (t) {\n    t = t === undefined ? true : t;\n    var e = t ? \"addEventListener\" : \"removeEventListener\";\n    var i = t ? this._touchActionValue : \"\";\n\n    for (var n = 0; n < this.handles.length; n++) {\n      var s = this.handles[n];\n\n      this._bindStartEvent(s, t);\n\n      s[e](\"click\", this);\n\n      if (r.PointerEvent) {\n        s.style.touchAction = i;\n      }\n    }\n  };\n\n  n._touchActionValue = \"none\";\n\n  n.pointerDown = function (t, e) {\n    var i = this.okayPointerDown(t);\n\n    if (!i) {\n      return;\n    }\n\n    this.pointerDownPointer = {\n      pageX: e.pageX,\n      pageY: e.pageY\n    };\n    t.preventDefault();\n    this.pointerDownBlur();\n\n    this._bindPostStartEvents(t);\n\n    this.emitEvent(\"pointerDown\", [t, e]);\n  };\n\n  var s = {\n    TEXTAREA: true,\n    INPUT: true,\n    SELECT: true,\n    OPTION: true\n  };\n  var o = {\n    radio: true,\n    checkbox: true,\n    button: true,\n    submit: true,\n    image: true,\n    file: true\n  };\n\n  n.okayPointerDown = function (t) {\n    var e = s[t.target.nodeName];\n    var i = o[t.target.type];\n    var n = !e || i;\n\n    if (!n) {\n      this._pointerReset();\n    }\n\n    return n;\n  };\n\n  n.pointerDownBlur = function () {\n    var t = document.activeElement;\n    var e = t && t.blur && t != document.body;\n\n    if (e) {\n      t.blur();\n    }\n  };\n\n  n.pointerMove = function (t, e) {\n    var i = this._dragPointerMove(t, e);\n\n    this.emitEvent(\"pointerMove\", [t, e, i]);\n\n    this._dragMove(t, e, i);\n  };\n\n  n._dragPointerMove = function (t, e) {\n    var i = {\n      x: e.pageX - this.pointerDownPointer.pageX,\n      y: e.pageY - this.pointerDownPointer.pageY\n    };\n\n    if (!this.isDragging && this.hasDragStarted(i)) {\n      this._dragStart(t, e);\n    }\n\n    return i;\n  };\n\n  n.hasDragStarted = function (t) {\n    return Math.abs(t.x) > 3 || Math.abs(t.y) > 3;\n  };\n\n  n.pointerUp = function (t, e) {\n    this.emitEvent(\"pointerUp\", [t, e]);\n\n    this._dragPointerUp(t, e);\n  };\n\n  n._dragPointerUp = function (t, e) {\n    if (this.isDragging) {\n      this._dragEnd(t, e);\n    } else {\n      this._staticClick(t, e);\n    }\n  };\n\n  n._dragStart = function (t, e) {\n    this.isDragging = true;\n    this.isPreventingClicks = true;\n    this.dragStart(t, e);\n  };\n\n  n.dragStart = function (t, e) {\n    this.emitEvent(\"dragStart\", [t, e]);\n  };\n\n  n._dragMove = function (t, e, i) {\n    if (!this.isDragging) {\n      return;\n    }\n\n    this.dragMove(t, e, i);\n  };\n\n  n.dragMove = function (t, e, i) {\n    t.preventDefault();\n    this.emitEvent(\"dragMove\", [t, e, i]);\n  };\n\n  n._dragEnd = function (t, e) {\n    this.isDragging = false;\n    setTimeout(function () {\n      delete this.isPreventingClicks;\n    }.bind(this));\n    this.dragEnd(t, e);\n  };\n\n  n.dragEnd = function (t, e) {\n    this.emitEvent(\"dragEnd\", [t, e]);\n  };\n\n  n.onclick = function (t) {\n    if (this.isPreventingClicks) {\n      t.preventDefault();\n    }\n  };\n\n  n._staticClick = function (t, e) {\n    if (this.isIgnoringMouseUp && t.type == \"mouseup\") {\n      return;\n    }\n\n    this.staticClick(t, e);\n\n    if (t.type != \"mouseup\") {\n      this.isIgnoringMouseUp = true;\n      setTimeout(function () {\n        delete this.isIgnoringMouseUp;\n      }.bind(this), 400);\n    }\n  };\n\n  n.staticClick = function (t, e) {\n    this.emitEvent(\"staticClick\", [t, e]);\n  };\n\n  i.getPointerPoint = e.getPointerPoint;\n  return i;\n});\n\n(function (n, s) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_10__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_11__ = (function (t, e, i) {\n      return s(n, t, e, i);\n    }).apply(__WEBPACK_LOCAL_MODULE_11__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_11__ === undefined && (__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__exports));\n  } else {}\n})(window, function t(n, e, i, a) {\n  a.extend(e.defaults, {\n    draggable: \">1\",\n    dragThreshold: 3\n  });\n  e.createMethods.push(\"_createDrag\");\n  var s = e.prototype;\n  a.extend(s, i.prototype);\n  s._touchActionValue = \"pan-y\";\n\n  s._createDrag = function () {\n    this.on(\"activate\", this.onActivateDrag);\n    this.on(\"uiChange\", this._uiChangeDrag);\n    this.on(\"deactivate\", this.onDeactivateDrag);\n    this.on(\"cellChange\", this.updateDraggable);\n  };\n\n  s.onActivateDrag = function () {\n    this.handles = [this.viewport];\n    this.bindHandles();\n    this.updateDraggable();\n  };\n\n  s.onDeactivateDrag = function () {\n    this.unbindHandles();\n    this.element.classList.remove(\"is-draggable\");\n  };\n\n  s.updateDraggable = function () {\n    if (this.options.draggable == \">1\") {\n      this.isDraggable = this.slides.length > 1;\n    } else {\n      this.isDraggable = this.options.draggable;\n    }\n\n    if (this.isDraggable) {\n      this.element.classList.add(\"is-draggable\");\n    } else {\n      this.element.classList.remove(\"is-draggable\");\n    }\n  };\n\n  s.bindDrag = function () {\n    this.options.draggable = true;\n    this.updateDraggable();\n  };\n\n  s.unbindDrag = function () {\n    this.options.draggable = false;\n    this.updateDraggable();\n  };\n\n  s._uiChangeDrag = function () {\n    delete this.isFreeScrolling;\n  };\n\n  s.pointerDown = function (t, e) {\n    if (!this.isDraggable) {\n      this._pointerDownDefault(t, e);\n\n      return;\n    }\n\n    var i = this.okayPointerDown(t);\n\n    if (!i) {\n      return;\n    }\n\n    this._pointerDownPreventDefault(t);\n\n    this.pointerDownFocus(t);\n\n    if (document.activeElement != this.element) {\n      this.pointerDownBlur();\n    }\n\n    this.dragX = this.x;\n    this.viewport.classList.add(\"is-pointer-down\");\n    this.pointerDownScroll = o();\n    n.addEventListener(\"scroll\", this);\n\n    this._pointerDownDefault(t, e);\n  };\n\n  s._pointerDownDefault = function (t, e) {\n    this.pointerDownPointer = {\n      pageX: e.pageX,\n      pageY: e.pageY\n    };\n\n    this._bindPostStartEvents(t);\n\n    this.dispatchEvent(\"pointerDown\", t, [e]);\n  };\n\n  var r = {\n    INPUT: true,\n    TEXTAREA: true,\n    SELECT: true\n  };\n\n  s.pointerDownFocus = function (t) {\n    var e = r[t.target.nodeName];\n\n    if (!e) {\n      this.focus();\n    }\n  };\n\n  s._pointerDownPreventDefault = function (t) {\n    var e = t.type == \"touchstart\";\n    var i = t.pointerType == \"touch\";\n    var n = r[t.target.nodeName];\n\n    if (!e && !i && !n) {\n      t.preventDefault();\n    }\n  };\n\n  s.hasDragStarted = function (t) {\n    return Math.abs(t.x) > this.options.dragThreshold;\n  };\n\n  s.pointerUp = function (t, e) {\n    delete this.isTouchScrolling;\n    this.viewport.classList.remove(\"is-pointer-down\");\n    this.dispatchEvent(\"pointerUp\", t, [e]);\n\n    this._dragPointerUp(t, e);\n  };\n\n  s.pointerDone = function () {\n    n.removeEventListener(\"scroll\", this);\n    delete this.pointerDownScroll;\n  };\n\n  s.dragStart = function (t, e) {\n    if (!this.isDraggable) {\n      return;\n    }\n\n    this.dragStartPosition = this.x;\n    this.startAnimation();\n    n.removeEventListener(\"scroll\", this);\n    this.dispatchEvent(\"dragStart\", t, [e]);\n  };\n\n  s.pointerMove = function (t, e) {\n    var i = this._dragPointerMove(t, e);\n\n    this.dispatchEvent(\"pointerMove\", t, [e, i]);\n\n    this._dragMove(t, e, i);\n  };\n\n  s.dragMove = function (t, e, i) {\n    if (!this.isDraggable) {\n      return;\n    }\n\n    t.preventDefault();\n    this.previousDragX = this.dragX;\n    var n = this.options.rightToLeft ? -1 : 1;\n\n    if (this.options.wrapAround) {\n      i.x %= this.slideableWidth;\n    }\n\n    var s = this.dragStartPosition + i.x * n;\n\n    if (!this.options.wrapAround && this.slides.length) {\n      var r = Math.max(-this.slides[0].target, this.dragStartPosition);\n      s = s > r ? (s + r) * .5 : s;\n      var o = Math.min(-this.getLastSlide().target, this.dragStartPosition);\n      s = s < o ? (s + o) * .5 : s;\n    }\n\n    this.dragX = s;\n    this.dragMoveTime = new Date();\n    this.dispatchEvent(\"dragMove\", t, [e, i]);\n  };\n\n  s.dragEnd = function (t, e) {\n    if (!this.isDraggable) {\n      return;\n    }\n\n    if (this.options.freeScroll) {\n      this.isFreeScrolling = true;\n    }\n\n    var i = this.dragEndRestingSelect();\n\n    if (this.options.freeScroll && !this.options.wrapAround) {\n      var n = this.getRestingPosition();\n      this.isFreeScrolling = -n > this.slides[0].target && -n < this.getLastSlide().target;\n    } else if (!this.options.freeScroll && i == this.selectedIndex) {\n      i += this.dragEndBoostSelect();\n    }\n\n    delete this.previousDragX;\n    this.isDragSelect = this.options.wrapAround;\n    this.select(i);\n    delete this.isDragSelect;\n    this.dispatchEvent(\"dragEnd\", t, [e]);\n  };\n\n  s.dragEndRestingSelect = function () {\n    var t = this.getRestingPosition();\n    var e = Math.abs(this.getSlideDistance(-t, this.selectedIndex));\n\n    var i = this._getClosestResting(t, e, 1);\n\n    var n = this._getClosestResting(t, e, -1);\n\n    var s = i.distance < n.distance ? i.index : n.index;\n    return s;\n  };\n\n  s._getClosestResting = function (t, e, i) {\n    var n = this.selectedIndex;\n    var s = Infinity;\n    var r = this.options.contain && !this.options.wrapAround ? function (t, e) {\n      return t <= e;\n    } : function (t, e) {\n      return t < e;\n    };\n\n    while (r(e, s)) {\n      n += i;\n      s = e;\n      e = this.getSlideDistance(-t, n);\n\n      if (e === null) {\n        break;\n      }\n\n      e = Math.abs(e);\n    }\n\n    return {\n      distance: s,\n      index: n - i\n    };\n  };\n\n  s.getSlideDistance = function (t, e) {\n    var i = this.slides.length;\n    var n = this.options.wrapAround && i > 1;\n    var s = n ? a.modulo(e, i) : e;\n    var r = this.slides[s];\n\n    if (!r) {\n      return null;\n    }\n\n    var o = n ? this.slideableWidth * Math.floor(e / i) : 0;\n    return t - (r.target + o);\n  };\n\n  s.dragEndBoostSelect = function () {\n    if (this.previousDragX === undefined || !this.dragMoveTime || new Date() - this.dragMoveTime > 100) {\n      return 0;\n    }\n\n    var t = this.getSlideDistance(-this.dragX, this.selectedIndex);\n    var e = this.previousDragX - this.dragX;\n\n    if (t > 0 && e > 0) {\n      return 1;\n    } else if (t < 0 && e < 0) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  s.staticClick = function (t, e) {\n    var i = this.getParentCell(t.target);\n    var n = i && i.element;\n    var s = i && this.cells.indexOf(i);\n    this.dispatchEvent(\"staticClick\", t, [e, n, s]);\n  };\n\n  s.onscroll = function () {\n    var t = o();\n    var e = this.pointerDownScroll.x - t.x;\n    var i = this.pointerDownScroll.y - t.y;\n\n    if (Math.abs(e) > 3 || Math.abs(i) > 3) {\n      this._pointerDone();\n    }\n  };\n\n  function o() {\n    return {\n      x: n.pageXOffset,\n      y: n.pageYOffset\n    };\n  }\n\n  return e;\n});\n\n(function (n, s) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_9__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_12__ = (function (t, e, i) {\n      return s(n, t, e, i);\n    }).apply(__WEBPACK_LOCAL_MODULE_12__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_12__ === undefined && (__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__exports));\n  } else {}\n})(window, function t(e, i, n, s) {\n  \"use strict\";\n\n  var r = \"http://www.w3.org/2000/svg\";\n\n  function o(t, e) {\n    this.direction = t;\n    this.parent = e;\n\n    this._create();\n  }\n\n  o.prototype = Object.create(n.prototype);\n\n  o.prototype._create = function () {\n    this.isEnabled = true;\n    this.isPrevious = this.direction == -1;\n    var t = this.parent.options.rightToLeft ? 1 : -1;\n    this.isLeft = this.direction == t;\n    var e = this.element = document.createElement(\"button\");\n    e.className = \"flickity-button flickity-prev-next-button\";\n    e.className += this.isPrevious ? \" previous\" : \" next\";\n    e.setAttribute(\"type\", \"button\");\n    this.disable();\n    e.setAttribute(\"aria-label\", this.isPrevious ? \"Previous\" : \"Next\");\n    var i = this.createSVG();\n    e.appendChild(i);\n    this.parent.on(\"select\", this.update.bind(this));\n    this.on(\"pointerDown\", this.parent.childUIPointerDown.bind(this.parent));\n  };\n\n  o.prototype.activate = function () {\n    this.bindStartEvent(this.element);\n    this.element.addEventListener(\"click\", this);\n    this.parent.element.appendChild(this.element);\n  };\n\n  o.prototype.deactivate = function () {\n    this.parent.element.removeChild(this.element);\n    this.unbindStartEvent(this.element);\n    this.element.removeEventListener(\"click\", this);\n  };\n\n  o.prototype.createSVG = function () {\n    var t = document.createElementNS(r, \"svg\");\n    t.setAttribute(\"class\", \"flickity-button-icon\");\n    t.setAttribute(\"viewBox\", \"0 0 100 100\");\n    var e = document.createElementNS(r, \"path\");\n    var i = a(this.parent.options.arrowShape);\n    e.setAttribute(\"d\", i);\n    e.setAttribute(\"class\", \"arrow\");\n\n    if (!this.isLeft) {\n      e.setAttribute(\"transform\", \"translate(100, 100) rotate(180) \");\n    }\n\n    t.appendChild(e);\n    return t;\n  };\n\n  function a(t) {\n    if (typeof t == \"string\") {\n      return t;\n    }\n\n    return \"M \" + t.x0 + \",50\" + \" L \" + t.x1 + \",\" + (t.y1 + 50) + \" L \" + t.x2 + \",\" + (t.y2 + 50) + \" L \" + t.x3 + \",50 \" + \" L \" + t.x2 + \",\" + (50 - t.y2) + \" L \" + t.x1 + \",\" + (50 - t.y1) + \" Z\";\n  }\n\n  o.prototype.handleEvent = s.handleEvent;\n\n  o.prototype.onclick = function () {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this.parent.uiChange();\n    var t = this.isPrevious ? \"previous\" : \"next\";\n    this.parent[t]();\n  };\n\n  o.prototype.enable = function () {\n    if (this.isEnabled) {\n      return;\n    }\n\n    this.element.disabled = false;\n    this.isEnabled = true;\n  };\n\n  o.prototype.disable = function () {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this.element.disabled = true;\n    this.isEnabled = false;\n  };\n\n  o.prototype.update = function () {\n    var t = this.parent.slides;\n\n    if (this.parent.options.wrapAround && t.length > 1) {\n      this.enable();\n      return;\n    }\n\n    var e = t.length ? t.length - 1 : 0;\n    var i = this.isPrevious ? 0 : e;\n    var n = this.parent.selectedIndex == i ? \"disable\" : \"enable\";\n    this[n]();\n  };\n\n  o.prototype.destroy = function () {\n    this.deactivate();\n    this.allOff();\n  };\n\n  s.extend(i.defaults, {\n    prevNextButtons: true,\n    arrowShape: {\n      x0: 10,\n      x1: 60,\n      y1: 50,\n      x2: 70,\n      y2: 40,\n      x3: 30\n    }\n  });\n  i.createMethods.push(\"_createPrevNextButtons\");\n  var l = i.prototype;\n\n  l._createPrevNextButtons = function () {\n    if (!this.options.prevNextButtons) {\n      return;\n    }\n\n    this.prevButton = new o(-1, this);\n    this.nextButton = new o(1, this);\n    this.on(\"activate\", this.activatePrevNextButtons);\n  };\n\n  l.activatePrevNextButtons = function () {\n    this.prevButton.activate();\n    this.nextButton.activate();\n    this.on(\"deactivate\", this.deactivatePrevNextButtons);\n  };\n\n  l.deactivatePrevNextButtons = function () {\n    this.prevButton.deactivate();\n    this.nextButton.deactivate();\n    this.off(\"deactivate\", this.deactivatePrevNextButtons);\n  };\n\n  i.PrevNextButton = o;\n  return i;\n});\n\n(function (n, s) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_9__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_13__ = (function (t, e, i) {\n      return s(n, t, e, i);\n    }).apply(__WEBPACK_LOCAL_MODULE_13__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_13__ === undefined && (__WEBPACK_LOCAL_MODULE_13__ = __WEBPACK_LOCAL_MODULE_13__exports));\n  } else {}\n})(window, function t(e, i, n, s) {\n  function r(t) {\n    this.parent = t;\n\n    this._create();\n  }\n\n  r.prototype = Object.create(n.prototype);\n\n  r.prototype._create = function () {\n    this.holder = document.createElement(\"ol\");\n    this.holder.className = \"flickity-page-dots\";\n    this.dots = [];\n    this.handleClick = this.onClick.bind(this);\n    this.on(\"pointerDown\", this.parent.childUIPointerDown.bind(this.parent));\n  };\n\n  r.prototype.activate = function () {\n    this.setDots();\n    this.holder.addEventListener(\"click\", this.handleClick);\n    this.bindStartEvent(this.holder);\n    this.parent.element.appendChild(this.holder);\n  };\n\n  r.prototype.deactivate = function () {\n    this.holder.removeEventListener(\"click\", this.handleClick);\n    this.unbindStartEvent(this.holder);\n    this.parent.element.removeChild(this.holder);\n  };\n\n  r.prototype.setDots = function () {\n    var t = this.parent.slides.length - this.dots.length;\n\n    if (t > 0) {\n      this.addDots(t);\n    } else if (t < 0) {\n      this.removeDots(-t);\n    }\n  };\n\n  r.prototype.addDots = function (t) {\n    var e = document.createDocumentFragment();\n    var i = [];\n    var n = this.dots.length;\n    var s = n + t;\n\n    for (var r = n; r < s; r++) {\n      var o = document.createElement(\"li\");\n      o.className = \"dot\";\n      o.setAttribute(\"aria-label\", \"Page dot \" + (r + 1));\n      e.appendChild(o);\n      i.push(o);\n    }\n\n    this.holder.appendChild(e);\n    this.dots = this.dots.concat(i);\n  };\n\n  r.prototype.removeDots = function (t) {\n    var e = this.dots.splice(this.dots.length - t, t);\n    e.forEach(function (t) {\n      this.holder.removeChild(t);\n    }, this);\n  };\n\n  r.prototype.updateSelected = function () {\n    if (this.selectedDot) {\n      this.selectedDot.className = \"dot\";\n      this.selectedDot.removeAttribute(\"aria-current\");\n    }\n\n    if (!this.dots.length) {\n      return;\n    }\n\n    this.selectedDot = this.dots[this.parent.selectedIndex];\n    this.selectedDot.className = \"dot is-selected\";\n    this.selectedDot.setAttribute(\"aria-current\", \"step\");\n  };\n\n  r.prototype.onTap = r.prototype.onClick = function (t) {\n    var e = t.target;\n\n    if (e.nodeName != \"LI\") {\n      return;\n    }\n\n    this.parent.uiChange();\n    var i = this.dots.indexOf(e);\n    this.parent.select(i);\n  };\n\n  r.prototype.destroy = function () {\n    this.deactivate();\n    this.allOff();\n  };\n\n  i.PageDots = r;\n  s.extend(i.defaults, {\n    pageDots: true\n  });\n  i.createMethods.push(\"_createPageDots\");\n  var o = i.prototype;\n\n  o._createPageDots = function () {\n    if (!this.options.pageDots) {\n      return;\n    }\n\n    this.pageDots = new r(this);\n    this.on(\"activate\", this.activatePageDots);\n    this.on(\"select\", this.updateSelectedPageDots);\n    this.on(\"cellChange\", this.updatePageDots);\n    this.on(\"resize\", this.updatePageDots);\n    this.on(\"deactivate\", this.deactivatePageDots);\n  };\n\n  o.activatePageDots = function () {\n    this.pageDots.activate();\n  };\n\n  o.updateSelectedPageDots = function () {\n    this.pageDots.updateSelected();\n  };\n\n  o.updatePageDots = function () {\n    this.pageDots.setDots();\n  };\n\n  o.deactivatePageDots = function () {\n    this.pageDots.deactivate();\n  };\n\n  i.PageDots = r;\n  return i;\n});\n\n(function (t, n) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_8__], __WEBPACK_LOCAL_MODULE_14__ = (function (t, e, i) {\n      return n(t, e, i);\n    }).apply(__WEBPACK_LOCAL_MODULE_14__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_14__ === undefined && (__WEBPACK_LOCAL_MODULE_14__ = __WEBPACK_LOCAL_MODULE_14__exports));\n  } else {}\n})(window, function t(e, i, n) {\n  function s(t) {\n    this.parent = t;\n    this.state = \"stopped\";\n    this.onVisibilityChange = this.visibilityChange.bind(this);\n    this.onVisibilityPlay = this.visibilityPlay.bind(this);\n  }\n\n  s.prototype = Object.create(e.prototype);\n\n  s.prototype.play = function () {\n    if (this.state == \"playing\") {\n      return;\n    }\n\n    var t = document.hidden;\n\n    if (t) {\n      document.addEventListener(\"visibilitychange\", this.onVisibilityPlay);\n      return;\n    }\n\n    this.state = \"playing\";\n    document.addEventListener(\"visibilitychange\", this.onVisibilityChange);\n    this.tick();\n  };\n\n  s.prototype.tick = function () {\n    if (this.state != \"playing\") {\n      return;\n    }\n\n    var t = this.parent.options.autoPlay;\n    t = typeof t == \"number\" ? t : 3e3;\n    var e = this;\n    this.clear();\n    this.timeout = setTimeout(function () {\n      e.parent.next(true);\n      e.tick();\n    }, t);\n  };\n\n  s.prototype.stop = function () {\n    this.state = \"stopped\";\n    this.clear();\n    document.removeEventListener(\"visibilitychange\", this.onVisibilityChange);\n  };\n\n  s.prototype.clear = function () {\n    clearTimeout(this.timeout);\n  };\n\n  s.prototype.pause = function () {\n    if (this.state == \"playing\") {\n      this.state = \"paused\";\n      this.clear();\n    }\n  };\n\n  s.prototype.unpause = function () {\n    if (this.state == \"paused\") {\n      this.play();\n    }\n  };\n\n  s.prototype.visibilityChange = function () {\n    var t = document.hidden;\n    this[t ? \"pause\" : \"unpause\"]();\n  };\n\n  s.prototype.visibilityPlay = function () {\n    this.play();\n    document.removeEventListener(\"visibilitychange\", this.onVisibilityPlay);\n  };\n\n  i.extend(n.defaults, {\n    pauseAutoPlayOnHover: true\n  });\n  n.createMethods.push(\"_createPlayer\");\n  var r = n.prototype;\n\n  r._createPlayer = function () {\n    this.player = new s(this);\n    this.on(\"activate\", this.activatePlayer);\n    this.on(\"uiChange\", this.stopPlayer);\n    this.on(\"pointerDown\", this.stopPlayer);\n    this.on(\"deactivate\", this.deactivatePlayer);\n  };\n\n  r.activatePlayer = function () {\n    if (!this.options.autoPlay) {\n      return;\n    }\n\n    this.player.play();\n    this.element.addEventListener(\"mouseenter\", this);\n  };\n\n  r.playPlayer = function () {\n    this.player.play();\n  };\n\n  r.stopPlayer = function () {\n    this.player.stop();\n  };\n\n  r.pausePlayer = function () {\n    this.player.pause();\n  };\n\n  r.unpausePlayer = function () {\n    this.player.unpause();\n  };\n\n  r.deactivatePlayer = function () {\n    this.player.stop();\n    this.element.removeEventListener(\"mouseenter\", this);\n  };\n\n  r.onmouseenter = function () {\n    if (!this.options.pauseAutoPlayOnHover) {\n      return;\n    }\n\n    this.player.pause();\n    this.element.addEventListener(\"mouseleave\", this);\n  };\n\n  r.onmouseleave = function () {\n    this.player.unpause();\n    this.element.removeEventListener(\"mouseleave\", this);\n  };\n\n  n.Player = s;\n  return n;\n});\n\n(function (i, n) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_15__ = (function (t, e) {\n      return n(i, t, e);\n    }).apply(__WEBPACK_LOCAL_MODULE_15__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_15__ === undefined && (__WEBPACK_LOCAL_MODULE_15__ = __WEBPACK_LOCAL_MODULE_15__exports));\n  } else {}\n})(window, function t(e, i, n) {\n  function l(t) {\n    var e = document.createDocumentFragment();\n    t.forEach(function (t) {\n      e.appendChild(t.element);\n    });\n    return e;\n  }\n\n  var s = i.prototype;\n\n  s.insert = function (t, e) {\n    var i = this._makeCells(t);\n\n    if (!i || !i.length) {\n      return;\n    }\n\n    var n = this.cells.length;\n    e = e === undefined ? n : e;\n    var s = l(i);\n    var r = e == n;\n\n    if (r) {\n      this.slider.appendChild(s);\n    } else {\n      var o = this.cells[e].element;\n      this.slider.insertBefore(s, o);\n    }\n\n    if (e === 0) {\n      this.cells = i.concat(this.cells);\n    } else if (r) {\n      this.cells = this.cells.concat(i);\n    } else {\n      var a = this.cells.splice(e, n - e);\n      this.cells = this.cells.concat(i).concat(a);\n    }\n\n    this._sizeCells(i);\n\n    this.cellChange(e, true);\n  };\n\n  s.append = function (t) {\n    this.insert(t, this.cells.length);\n  };\n\n  s.prepend = function (t) {\n    this.insert(t, 0);\n  };\n\n  s.remove = function (t) {\n    var e = this.getCells(t);\n\n    if (!e || !e.length) {\n      return;\n    }\n\n    var i = this.cells.length - 1;\n    e.forEach(function (t) {\n      t.remove();\n      var e = this.cells.indexOf(t);\n      i = Math.min(e, i);\n      n.removeFrom(this.cells, t);\n    }, this);\n    this.cellChange(i, true);\n  };\n\n  s.cellSizeChange = function (t) {\n    var e = this.getCell(t);\n\n    if (!e) {\n      return;\n    }\n\n    e.getSize();\n    var i = this.cells.indexOf(e);\n    this.cellChange(i);\n  };\n\n  s.cellChange = function (t, e) {\n    var i = this.selectedElement;\n\n    this._positionCells(t);\n\n    this._getWrapShiftCells();\n\n    this.setGallerySize();\n    var n = this.getCell(i);\n\n    if (n) {\n      this.selectedIndex = this.getCellSlideIndex(n);\n    }\n\n    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);\n    this.emitEvent(\"cellChange\", [t]);\n    this.select(this.selectedIndex);\n\n    if (e) {\n      this.positionSliderAtSelected();\n    }\n  };\n\n  return i;\n});\n\n(function (i, n) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_16__ = (function (t, e) {\n      return n(i, t, e);\n    }).apply(__WEBPACK_LOCAL_MODULE_16__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_16__ === undefined && (__WEBPACK_LOCAL_MODULE_16__ = __WEBPACK_LOCAL_MODULE_16__exports));\n  } else {}\n})(window, function t(e, i, o) {\n  \"use strict\";\n\n  i.createMethods.push(\"_createLazyload\");\n  var n = i.prototype;\n\n  n._createLazyload = function () {\n    this.on(\"select\", this.lazyLoad);\n  };\n\n  n.lazyLoad = function () {\n    var t = this.options.lazyLoad;\n\n    if (!t) {\n      return;\n    }\n\n    var e = typeof t == \"number\" ? t : 0;\n    var i = this.getAdjacentCellElements(e);\n    var n = [];\n    i.forEach(function (t) {\n      var e = s(t);\n      n = n.concat(e);\n    });\n    n.forEach(function (t) {\n      new r(t, this);\n    }, this);\n  };\n\n  function s(t) {\n    if (t.nodeName == \"IMG\") {\n      var e = t.getAttribute(\"data-flickity-lazyload\");\n      var i = t.getAttribute(\"data-flickity-lazyload-src\");\n      var n = t.getAttribute(\"data-flickity-lazyload-srcset\");\n\n      if (e || i || n) {\n        return [t];\n      }\n    }\n\n    var s = \"img[data-flickity-lazyload], \" + \"img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]\";\n    var r = t.querySelectorAll(s);\n    return o.makeArray(r);\n  }\n\n  function r(t, e) {\n    this.img = t;\n    this.flickity = e;\n    this.load();\n  }\n\n  r.prototype.handleEvent = o.handleEvent;\n\n  r.prototype.load = function () {\n    this.img.addEventListener(\"load\", this);\n    this.img.addEventListener(\"error\", this);\n    var t = this.img.getAttribute(\"data-flickity-lazyload\") || this.img.getAttribute(\"data-flickity-lazyload-src\");\n    var e = this.img.getAttribute(\"data-flickity-lazyload-srcset\");\n    this.img.src = t;\n\n    if (e) {\n      this.img.setAttribute(\"srcset\", e);\n    }\n\n    this.img.removeAttribute(\"data-flickity-lazyload\");\n    this.img.removeAttribute(\"data-flickity-lazyload-src\");\n    this.img.removeAttribute(\"data-flickity-lazyload-srcset\");\n  };\n\n  r.prototype.onload = function (t) {\n    this.complete(t, \"flickity-lazyloaded\");\n  };\n\n  r.prototype.onerror = function (t) {\n    this.complete(t, \"flickity-lazyerror\");\n  };\n\n  r.prototype.complete = function (t, e) {\n    this.img.removeEventListener(\"load\", this);\n    this.img.removeEventListener(\"error\", this);\n    var i = this.flickity.getParentCell(this.img);\n    var n = i && i.element;\n    this.flickity.cellSizeChange(n);\n    this.img.classList.add(e);\n    this.flickity.dispatchEvent(\"lazyLoad\", t, n);\n  };\n\n  i.LazyLoader = r;\n  return i;\n});\n/*!\n * Flickity v2.3.0\n * Touch, responsive, flickable carousels\n *\n * Licensed GPLv3 for open source use\n * or Flickity Commercial License for commercial use\n *\n * https://flickity.metafizzy.co\n * Copyright 2015-2021 Metafizzy\n */\n\n\n(function (t, e) {\n  if (true) {\n    !(__WEBPACK_LOCAL_MODULE_17__array = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_11__, __WEBPACK_LOCAL_MODULE_12__, __WEBPACK_LOCAL_MODULE_13__, __WEBPACK_LOCAL_MODULE_14__, __WEBPACK_LOCAL_MODULE_15__, __WEBPACK_LOCAL_MODULE_16__], __WEBPACK_LOCAL_MODULE_17__factory = (e),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_17__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_17__ = __WEBPACK_LOCAL_MODULE_17__factory.apply(__WEBPACK_LOCAL_MODULE_17__exports = {}, __WEBPACK_LOCAL_MODULE_17__array)), __WEBPACK_LOCAL_MODULE_17__ === undefined && (__WEBPACK_LOCAL_MODULE_17__ = __WEBPACK_LOCAL_MODULE_17__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_17__ = __WEBPACK_LOCAL_MODULE_17__factory)\n\t\t));\n  } else {}\n})(window, function t(e) {\n  return e;\n});\n/*!\n * Flickity asNavFor v2.0.2\n * enable asNavFor for Flickity\n */\n\n\n(function (t, e) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_17__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function t(n, s) {\n  n.createMethods.push(\"_createAsNavFor\");\n  var e = n.prototype;\n\n  e._createAsNavFor = function () {\n    this.on(\"activate\", this.activateAsNavFor);\n    this.on(\"deactivate\", this.deactivateAsNavFor);\n    this.on(\"destroy\", this.destroyAsNavFor);\n    var e = this.options.asNavFor;\n\n    if (!e) {\n      return;\n    }\n\n    var i = this;\n    setTimeout(function t() {\n      i.setNavCompanion(e);\n    });\n  };\n\n  e.setNavCompanion = function (t) {\n    t = s.getQueryElement(t);\n    var e = n.data(t);\n\n    if (!e || e == this) {\n      return;\n    }\n\n    this.navCompanion = e;\n    var i = this;\n\n    this.onNavCompanionSelect = function () {\n      i.navCompanionSelect();\n    };\n\n    e.on(\"select\", this.onNavCompanionSelect);\n    this.on(\"staticClick\", this.onNavStaticClick);\n    this.navCompanionSelect(true);\n  };\n\n  e.navCompanionSelect = function (t) {\n    var e = this.navCompanion && this.navCompanion.selectedCells;\n\n    if (!e) {\n      return;\n    }\n\n    var i = e[0];\n    var n = this.navCompanion.cells.indexOf(i);\n    var s = n + e.length - 1;\n    var r = Math.floor(a(n, s, this.navCompanion.cellAlign));\n    this.selectCell(r, false, t);\n    this.removeNavSelectedElements();\n\n    if (r >= this.cells.length) {\n      return;\n    }\n\n    var o = this.cells.slice(n, s + 1);\n    this.navSelectedElements = o.map(function (t) {\n      return t.element;\n    });\n    this.changeNavSelectedClass(\"add\");\n  };\n\n  function a(t, e, i) {\n    return (e - t) * i + t;\n  }\n\n  e.changeNavSelectedClass = function (e) {\n    this.navSelectedElements.forEach(function (t) {\n      t.classList[e](\"is-nav-selected\");\n    });\n  };\n\n  e.activateAsNavFor = function () {\n    this.navCompanionSelect(true);\n  };\n\n  e.removeNavSelectedElements = function () {\n    if (!this.navSelectedElements) {\n      return;\n    }\n\n    this.changeNavSelectedClass(\"remove\");\n    delete this.navSelectedElements;\n  };\n\n  e.onNavStaticClick = function (t, e, i, n) {\n    if (typeof n == \"number\") {\n      this.navCompanion.selectCell(n);\n    }\n  };\n\n  e.deactivateAsNavFor = function () {\n    this.removeNavSelectedElements();\n  };\n\n  e.destroyAsNavFor = function () {\n    if (!this.navCompanion) {\n      return;\n    }\n\n    this.navCompanion.off(\"select\", this.onNavCompanionSelect);\n    this.off(\"staticClick\", this.onNavStaticClick);\n    delete this.navCompanion;\n  };\n\n  return n;\n});\n/*!\n * imagesLoaded v4.1.4\n * JavaScript is all like \"You images are done yet or what?\"\n * MIT License\n */\n\n\n(function (e, i) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__], __WEBPACK_LOCAL_MODULE_19__ = (function (t) {\n      return i(e, t);\n    }).apply(__WEBPACK_LOCAL_MODULE_19__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_19__ === undefined && (__WEBPACK_LOCAL_MODULE_19__ = __WEBPACK_LOCAL_MODULE_19__exports));\n  } else {}\n})(typeof window !== \"undefined\" ? window : this, function t(e, i) {\n  var s = e.jQuery;\n  var r = e.console;\n\n  function o(t, e) {\n    for (var i in e) {\n      t[i] = e[i];\n    }\n\n    return t;\n  }\n\n  var n = Array.prototype.slice;\n\n  function a(t) {\n    if (Array.isArray(t)) {\n      return t;\n    }\n\n    var e = _typeof(t) == \"object\" && typeof t.length == \"number\";\n\n    if (e) {\n      return n.call(t);\n    }\n\n    return [t];\n  }\n\n  function l(t, e, i) {\n    if (!(this instanceof l)) {\n      return new l(t, e, i);\n    }\n\n    var n = t;\n\n    if (typeof t == \"string\") {\n      n = document.querySelectorAll(t);\n    }\n\n    if (!n) {\n      r.error(\"Bad element for imagesLoaded \" + (n || t));\n      return;\n    }\n\n    this.elements = a(n);\n    this.options = o({}, this.options);\n\n    if (typeof e == \"function\") {\n      i = e;\n    } else {\n      o(this.options, e);\n    }\n\n    if (i) {\n      this.on(\"always\", i);\n    }\n\n    this.getImages();\n\n    if (s) {\n      this.jqDeferred = new s.Deferred();\n    }\n\n    setTimeout(this.check.bind(this));\n  }\n\n  l.prototype = Object.create(i.prototype);\n  l.prototype.options = {};\n\n  l.prototype.getImages = function () {\n    this.images = [];\n    this.elements.forEach(this.addElementImages, this);\n  };\n\n  l.prototype.addElementImages = function (t) {\n    if (t.nodeName == \"IMG\") {\n      this.addImage(t);\n    }\n\n    if (this.options.background === true) {\n      this.addElementBackgroundImages(t);\n    }\n\n    var e = t.nodeType;\n\n    if (!e || !h[e]) {\n      return;\n    }\n\n    var i = t.querySelectorAll(\"img\");\n\n    for (var n = 0; n < i.length; n++) {\n      var s = i[n];\n      this.addImage(s);\n    }\n\n    if (typeof this.options.background == \"string\") {\n      var r = t.querySelectorAll(this.options.background);\n\n      for (n = 0; n < r.length; n++) {\n        var o = r[n];\n        this.addElementBackgroundImages(o);\n      }\n    }\n  };\n\n  var h = {\n    1: true,\n    9: true,\n    11: true\n  };\n\n  l.prototype.addElementBackgroundImages = function (t) {\n    var e = getComputedStyle(t);\n\n    if (!e) {\n      return;\n    }\n\n    var i = /url\\((['\"])?(.*?)\\1\\)/gi;\n    var n = i.exec(e.backgroundImage);\n\n    while (n !== null) {\n      var s = n && n[2];\n\n      if (s) {\n        this.addBackground(s, t);\n      }\n\n      n = i.exec(e.backgroundImage);\n    }\n  };\n\n  l.prototype.addImage = function (t) {\n    var e = new c(t);\n    this.images.push(e);\n  };\n\n  l.prototype.addBackground = function (t, e) {\n    var i = new u(t, e);\n    this.images.push(i);\n  };\n\n  l.prototype.check = function () {\n    var n = this;\n    this.progressedCount = 0;\n    this.hasAnyBroken = false;\n\n    if (!this.images.length) {\n      this.complete();\n      return;\n    }\n\n    function e(t, e, i) {\n      setTimeout(function () {\n        n.progress(t, e, i);\n      });\n    }\n\n    this.images.forEach(function (t) {\n      t.once(\"progress\", e);\n      t.check();\n    });\n  };\n\n  l.prototype.progress = function (t, e, i) {\n    this.progressedCount++;\n    this.hasAnyBroken = this.hasAnyBroken || !t.isLoaded;\n    this.emitEvent(\"progress\", [this, t, e]);\n\n    if (this.jqDeferred && this.jqDeferred.notify) {\n      this.jqDeferred.notify(this, t);\n    }\n\n    if (this.progressedCount == this.images.length) {\n      this.complete();\n    }\n\n    if (this.options.debug && r) {\n      r.log(\"progress: \" + i, t, e);\n    }\n  };\n\n  l.prototype.complete = function () {\n    var t = this.hasAnyBroken ? \"fail\" : \"done\";\n    this.isComplete = true;\n    this.emitEvent(t, [this]);\n    this.emitEvent(\"always\", [this]);\n\n    if (this.jqDeferred) {\n      var e = this.hasAnyBroken ? \"reject\" : \"resolve\";\n      this.jqDeferred[e](this);\n    }\n  };\n\n  function c(t) {\n    this.img = t;\n  }\n\n  c.prototype = Object.create(i.prototype);\n\n  c.prototype.check = function () {\n    var t = this.getIsImageComplete();\n\n    if (t) {\n      this.confirm(this.img.naturalWidth !== 0, \"naturalWidth\");\n      return;\n    }\n\n    this.proxyImage = new Image();\n    this.proxyImage.addEventListener(\"load\", this);\n    this.proxyImage.addEventListener(\"error\", this);\n    this.img.addEventListener(\"load\", this);\n    this.img.addEventListener(\"error\", this);\n    this.proxyImage.src = this.img.src;\n  };\n\n  c.prototype.getIsImageComplete = function () {\n    return this.img.complete && this.img.naturalWidth;\n  };\n\n  c.prototype.confirm = function (t, e) {\n    this.isLoaded = t;\n    this.emitEvent(\"progress\", [this, this.img, e]);\n  };\n\n  c.prototype.handleEvent = function (t) {\n    var e = \"on\" + t.type;\n\n    if (this[e]) {\n      this[e](t);\n    }\n  };\n\n  c.prototype.onload = function () {\n    this.confirm(true, \"onload\");\n    this.unbindEvents();\n  };\n\n  c.prototype.onerror = function () {\n    this.confirm(false, \"onerror\");\n    this.unbindEvents();\n  };\n\n  c.prototype.unbindEvents = function () {\n    this.proxyImage.removeEventListener(\"load\", this);\n    this.proxyImage.removeEventListener(\"error\", this);\n    this.img.removeEventListener(\"load\", this);\n    this.img.removeEventListener(\"error\", this);\n  };\n\n  function u(t, e) {\n    this.url = t;\n    this.element = e;\n    this.img = new Image();\n  }\n\n  u.prototype = Object.create(c.prototype);\n\n  u.prototype.check = function () {\n    this.img.addEventListener(\"load\", this);\n    this.img.addEventListener(\"error\", this);\n    this.img.src = this.url;\n    var t = this.getIsImageComplete();\n\n    if (t) {\n      this.confirm(this.img.naturalWidth !== 0, \"naturalWidth\");\n      this.unbindEvents();\n    }\n  };\n\n  u.prototype.unbindEvents = function () {\n    this.img.removeEventListener(\"load\", this);\n    this.img.removeEventListener(\"error\", this);\n  };\n\n  u.prototype.confirm = function (t, e) {\n    this.isLoaded = t;\n    this.emitEvent(\"progress\", [this, this.element, e]);\n  };\n\n  l.makeJQueryPlugin = function (t) {\n    t = t || e.jQuery;\n\n    if (!t) {\n      return;\n    }\n\n    s = t;\n\n    s.fn.imagesLoaded = function (t, e) {\n      var i = new l(this, t, e);\n      return i.jqDeferred.promise(s(this));\n    };\n  };\n\n  l.makeJQueryPlugin();\n  return l;\n});\n/*!\n * Flickity imagesLoaded v2.0.0\n * enables imagesLoaded option for Flickity\n */\n\n\n(function (i, n) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_17__, __WEBPACK_LOCAL_MODULE_19__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (t, e) {\n      return n(i, t, e);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function t(e, i, s) {\n  \"use strict\";\n\n  i.createMethods.push(\"_createImagesLoaded\");\n  var n = i.prototype;\n\n  n._createImagesLoaded = function () {\n    this.on(\"activate\", this.imagesLoaded);\n  };\n\n  n.imagesLoaded = function () {\n    if (!this.options.imagesLoaded) {\n      return;\n    }\n\n    var n = this;\n\n    function t(t, e) {\n      var i = n.getParentCell(e.img);\n      n.cellSizeChange(i && i.element);\n\n      if (!n.options.freeScroll) {\n        n.positionSliderAtSelected();\n      }\n    }\n\n    s(this.slider).on(\"progress\", t);\n  };\n\n  return i;\n});\n/*===== CONTINUED TEMP =====*/\n\n\nvar classes = {\n  open: 'open',\n  show: 'show',\n  hide: 'hide',\n  active: 'is-active'\n};\nvar selectors = {\n  GFBtn: 'button.button',\n  mobileMenu: '.menu-mobile',\n  mobileMenuTrigger: '#mobile-menu-trigger',\n  tooltip: '[data-toggle=\"tooltip\"]'\n};\n\nvar toggleMobileMenu = function toggleMobileMenu(trigger, menu) {\n  trigger.classList.toggle(classes.active);\n  menu.classList.toggle(classes.open);\n};\n\nfunction GFLoading() {\n  if (!this) return;\n  this.style.height = \"\".concat(this.offsetHeight, \"px\");\n  this.innerHTML = '<i class=\"fas fa-spinner-third fa-spin text-white\"></i>';\n}\n\nvar countryCodeToName = function countryCodeToName(country, all) {\n  if (country !== '') {\n    for (var key in all) {\n      if (key == country) {\n        return all[key];\n      }\n    }\n  } else {\n    return 'Unknown';\n  }\n};\n\nvar regionFormat = function regionFormat(region) {\n  if (region !== '') {\n    return region;\n  } else {\n    return 'Unknown';\n  }\n};\n\nfunction animateValue(id, start, end, duration) {\n  var range = end - start;\n  var current = start;\n  var increment = end > start ? start : -1;\n  var stepTime = Math.abs(Math.floor(duration / range));\n  var obj = document.getElementById(id);\n  var timer = setInterval(function () {\n    current += increment;\n    obj.innerHTML = numeral(current).format(0, 0, 0);\n\n    if (current == end) {\n      clearInterval(timer);\n    }\n  }, stepTime);\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var GFBtns = document.querySelectorAll(selectors.GFBtn);\n  var mobileMenuTrigger = document.querySelector(selectors.mobileMenuTrigger);\n  var mobileMenu = document.querySelector(selectors.mobileMenu);\n  /**\n   * Global vars\n   */\n\n  var isTop = true;\n  var newsletterPopupDismissed = false;\n  var winX;\n  var posY;\n  var winHeight = $(document).height();\n  var newsletterPopup = $('.modal');\n  var $_WINDOW = $(window);\n\n  var calcX = function calcX() {\n    return winX = $_WINDOW.width();\n  };\n\n  var calcY = function calcY() {\n    return posY = $_WINDOW.scrollTop();\n  };\n  /**\n   * Tooltips\n   */\n\n\n  $(selectors.tooltip).each(function () {\n    $(this).tooltip({\n      trigger: 'manual',\n      html: true\n    });\n    $(this).on('mouseenter', function () {\n      $(this).tooltip(classes.show);\n      $('.tooltip').on('mouseleave', function () {\n        $(this).tooltip(classes.hide);\n      });\n    });\n    $(this).on('mouseleave', function () {\n      setTimeout(function () {\n        if (!$('.tooltip:hover').length) {\n          $(selectors.tooltip).tooltip(classes.hide);\n        }\n      }, 300);\n    });\n  });\n  /**\n   * Nav Mobile.\n   */\n\n  if (mobileMenuTrigger) {\n    mobileMenuTrigger.addEventListener('click', toggleMobileMenu.bind(_this, mobileMenuTrigger, mobileMenu));\n  }\n  /**\n   * Accordion.\n   */\n\n\n  $('.accordionBtn').on('click', function (e) {\n    e.preventDefault();\n    var $this = $(this);\n\n    if ($this.next().hasClass(classes.show)) {\n      $this.next().removeClass(classes.show);\n      $this.next().slideUp(350);\n    } else {\n      $this.parent().parent().find('li .accordionItem').removeClass(classes.show);\n      $this.parent().parent().find('li .accordionItem').slideUp(350);\n      $this.next().toggleClass(classes.show);\n      $this.next().slideToggle(350);\n    }\n  });\n  /**\n   * Animate number.\n   */\n\n  /*\n  if ( $( '#count' ).length ) {\n    animateValue( 'count', 100000, 100000000, 1000 );\n  }\n  */\n\n  /**\n   * Fill hidden fields, only triggers if HubSpot form exists.\n   */\n\n  /*\n  if ( jQuery( '.hbspt-form' ) ) {\n    jQuery.getJSON( 'https://ipinfo.io?token=1ac9095e2f9aa7', function ( data ) {\n      const region = data.region;\n       // Fill hidden fields\n      const inputs = [ 'country', 'region' ];\n       inputs.forEach( function ( i ) {\n        switch ( i ) {\n          case 'country':\n            jQuery( '.hs-' + i + ' div input' ).val(\n              countryCodeToName( data[ i ], allCountriesName )\n            );\n            break;\n          case 'region':\n            jQuery( '.hs-' + i + '__c div input' ).val( regionFormat( region ) );\n            break;\n          default:\n            jQuery( '.hs-' + i + ' div input' ).val( data[ i ] );\n        }\n      } );\n    } );\n  }\n  */\n\n  /**\n   * Gravity forms.\n   */\n\n  if (GFBtns.length) {\n    GFBtns.forEach(function (btn) {\n      return btn.addEventListener('click', GFLoading);\n    });\n  }\n  /**\n   * Blog posts.\n   */\n\n\n  var newsletterClose = $('.modal-close');\n\n  if (newsletterPopup.length) {\n    (function () {\n      calcX();\n\n      if (!newsletterPopupDismissed) {\n        $(window).scroll(function () {\n          if (winX >= 960) {\n            calcY();\n\n            if (posY >= winHeight * 0.1 && isTop) {\n              isTop = false;\n              newsletterPopup.addClass('modal--show');\n            }\n          }\n        });\n      }\n    })();\n  }\n\n  if (newsletterClose.length) {\n    newsletterClose.on('click', function () {\n      newsletterPopup.removeClass('modal--show');\n      newsletterPopupDismissed = true;\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/more.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["/js/vendor"], function() { return __webpack_exec__("./resources/assets/js/more.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);